/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM mips version 1.3.0
** DO NOT EDIT! The original file is in "buildvm_mips.dasc".
*/

#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned int build_actionlist[6323] = {
0xff010001,
0xff060014,
0x32410000,
0xff090200,
0x10200000,
0xff050815,
0x240d0000,
0xff098200,
0x8dd20000,
0xff098200,
0x01c08021,
0xaeed0000,
0xff098200,
0x26f7fff8,
0xff060016,
0x324c0000,
0xff090200,
0x254a0008,
0x11800000,
0xff050817,
0x0140a821,
0xff060018,
0x240efff8,
0x39810000,
0xff090200,
0x024e7024,
0x14200000,
0xff050814,
0x020e7023,
0x254dfff8,
0xae8e0000,
0xff098200,
0x240c0000,
0xff098200,
0x8fae0078,
0x2610fff8,
0xae6c0000,
0xff098200,
0x11a00000,
0xff050802,
0x000e70c0,
0xff06000b,
0x25adfff8,
0xd6e00000,
0x26f70008,
0xf6000000,
0x15a00000,
0xff05080b,
0x26100008,
0xff06000c,
0x15ca0000,
0xff050806,
0xff06000d,
0xae900000,
0xff098200,
0xff060019,
0xff000000,
0x8fac0074,
0x00001021,
0xae8c0000,
0xff098200,
0xff06001a,
0x8fbf0000,
0xff098200,
0x8fbe0000,
0xff098200,
0xd7be0000,
0xff098200,
0x8fb70000,
0xff098200,
0x8fb60000,
0xff098200,
0xd7bc0000,
0xff098200,
0x8fb50000,
0xff098200,
0x8fb40000,
0xff098200,
0xd7ba0000,
0xff098200,
0x8fb30000,
0xff098200,
0x8fb20000,
0xff098200,
0xd7b80000,
0xff098200,
0x8fb10000,
0xff098200,
0x8fb00000,
0xff098200,
0xd7b60000,
0xff098200,
0xd7b40000,
0xff098200,
0x03e00008,
0x27bd0070,
0xff060010,
0x8e8d0000,
0xff098200,
0x01ca082a,
0x14200000,
0xff050807,
0x020d082a,
0x10200000,
0xff050808,
0x00000000,
0xae1e0000,
0xff098200,
0xff000000,
0x254a0008,
0x10000000,
0xff05080c,
0x26100008,
0xff060011,
0x014e6023,
0x020c6023,
0x10000000,
0xff05080d,
0x018e800b,
0xff060012,
0x8e790000,
0xff098200,
0x0140a821,
0x01c02821,
0x0320f809,
0x02802021,
0x8fae0078,
0x8e900000,
0xff098200,
0x02a05021,
0x10000000,
0xff05080c,
0x000e70c0,
0xff06001b,
0x0080e821,
0x00a01021,
0xff06001c,
0x8fb40070,
0x240c0000,
0xff098200,
0x8e8d0000,
0xff098200,
0x10000000,
0xff05081a,
0xadac0000,
0xff098200,
0xff06001d,
0x2401fffc,
0x0081e824,
0xff06001e,
0x8fb40070,
0x3c0f59c0,
0x241e0000,
0xff098200,
0x8e900000,
0xff098200,
0x8e930000,
0xff098200,
0x448ff000,
0x240d0000,
0xff098200,
0x240c0000,
0xff098200,
0x8e120000,
0xff098200,
0x4600f7a1,
0x2617fff8,
0x26730000,
0xff098200,
0xaeed0000,
0xff098200,
0xff000000,
0xae6c0000,
0xff098200,
0x10000000,
0xff050816,
0x240a0010,
0xff06001f,
0x10000000,
0xff050802,
0x24050000,
0xff098200,
0xff060020,
0x02094821,
0x02f0b823,
0xae900000,
0xff098200,
0x26520004,
0xae890000,
0xff098200,
0x001728c2,
0xff06000c,
0x8e790000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0x8e890000,
0xff098200,
0x8e080000,
0xff098200,
0x01304823,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff060021,
0x27bdff90,
0xafbf0000,
0xff098200,
0xafbe0000,
0xff098200,
0xf7be0000,
0xff098200,
0xafb70000,
0xff098200,
0xafb60000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafb50000,
0xff098200,
0xafb40000,
0xff098200,
0xff000000,
0xf7ba0000,
0xff098200,
0xafb30000,
0xff098200,
0xafb20000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb10000,
0xff098200,
0xafb00000,
0xff098200,
0xf7b60000,
0xff098200,
0xf7b40000,
0xff098200,
0x0080a021,
0x8e930000,
0xff098200,
0x00a08021,
0x928d0000,
0xff098200,
0xafb40070,
0x24120000,
0xff098200,
0x27ac0000,
0xff098200,
0x26730000,
0xff098200,
0xafa00078,
0xafa0007c,
0xae8c0000,
0xff098200,
0xafa00074,
0x11a00000,
0xff050803,
0xafa40014,
0x0200b821,
0x8e900000,
0xff098200,
0x8e8d0000,
0xff098200,
0x8e120000,
0xff098200,
0x3c0f59c0,
0x01b05023,
0x448ff000,
0xa2800000,
0xff098200,
0x4600f7a1,
0x240c0000,
0xff098200,
0x254a0008,
0xae6c0000,
0xff098200,
0x0140a821,
0x324c0000,
0xff090200,
0x11800000,
0xff050817,
0xff000000,
0x241e0000,
0xff098200,
0x10000000,
0xff050818,
0x00000000,
0xff060022,
0x27bdff90,
0xafbf0000,
0xff098200,
0xafbe0000,
0xff098200,
0xf7be0000,
0xff098200,
0xafb70000,
0xff098200,
0xafb60000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafb50000,
0xff098200,
0xafb40000,
0xff098200,
0xf7ba0000,
0xff098200,
0xafb30000,
0xff098200,
0xafb20000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb10000,
0xff098200,
0xafb00000,
0xff098200,
0xf7b60000,
0xff098200,
0xf7b40000,
0xff098200,
0xafa7007c,
0x10000000,
0xff050801,
0x24120000,
0xff098200,
0xff060023,
0x27bdff90,
0xafbf0000,
0xff098200,
0xff000000,
0xafbe0000,
0xff098200,
0xf7be0000,
0xff098200,
0xafb70000,
0xff098200,
0xafb60000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafb50000,
0xff098200,
0xafb40000,
0xff098200,
0xf7ba0000,
0xff098200,
0xafb30000,
0xff098200,
0xafb20000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb10000,
0xff098200,
0xafb00000,
0xff098200,
0xf7b60000,
0xff098200,
0xf7b40000,
0xff098200,
0x24120000,
0xff098200,
0xff06000b,
0x8c8d0000,
0xff098200,
0xafa60078,
0x0080a021,
0xafa40070,
0x00a08021,
0xae9d0000,
0xff098200,
0x8e930000,
0xff098200,
0xafa40014,
0xafad0074,
0x26730000,
0xff098200,
0xff06000d,
0x8e8e0000,
0xff098200,
0xff000000,
0x3c0f59c0,
0x8e8d0000,
0xff098200,
0x448ff000,
0x02509021,
0x01b04823,
0x024e9023,
0x4600f7a1,
0x240c0000,
0xff098200,
0x241e0000,
0xff098200,
0xae6c0000,
0xff098200,
0xff060024,
0x8e0c0000,
0xff098200,
0x24010000,
0xff098200,
0x15810000,
0xff050825,
0x8e080000,
0xff098200,
0xff060026,
0xae120000,
0xff098200,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff060027,
0x27bdff90,
0xafbf0000,
0xff098200,
0xafbe0000,
0xff098200,
0xf7be0000,
0xff098200,
0xafb70000,
0xff098200,
0xafb60000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafb50000,
0xff098200,
0xafb40000,
0xff098200,
0xf7ba0000,
0xff098200,
0xafb30000,
0xff098200,
0xff000000,
0xafb20000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb10000,
0xff098200,
0xafb00000,
0xff098200,
0xf7b60000,
0xff098200,
0xf7b40000,
0xff098200,
0x0080a021,
0x8c8c0000,
0xff098200,
0xafa40070,
0x8e8d0000,
0xff098200,
0xafa40014,
0x018d6023,
0x8e8d0000,
0xff098200,
0xae9d0000,
0xff098200,
0xafac0078,
0xafa0007c,
0x00e0c821,
0x00e0f809,
0xafad0074,
0x00408021,
0x8e930000,
0xff098200,
0x24120000,
0xff098200,
0x14400000,
0xff05080d,
0x26730000,
0xff098200,
0x10000000,
0xff050819,
0x00000000,
0xff060015,
0x8e0c0000,
0xff098200,
0x02004021,
0x01c08021,
0x8dcd0000,
0xff098200,
0xff000000,
0x2d810002,
0xff000000,
0x8d120000,
0xff098200,
0x02ea7021,
0x8dad0000,
0xff098200,
0xff000000,
0x14200000,
0xff050801,
0xff000000,
0xadde0000,
0xff098200,
0x01800008,
0x8db10000,
0xff098200,
0xff000000,
0xff06000b,
0x15800000,
0xff050828,
0x250dfff0,
0x10000000,
0xff050829,
0x01b04823,
0xff000000,
0xff06002a,
0x8e4bfffc,
0x2505fff0,
0xd6e00000,
0x000bad42,
0x000bb942,
0x32b507f8,
0x32f707f8,
0x02156821,
0xae900000,
0xff098200,
0x00ad3023,
0x15a50000,
0xff05082b,
0xf4a00000,
0x0217b821,
0x10000000,
0xff05082c,
0xf6e00000,
0xff06002d,
0x26660000,
0xff098200,
0x240c0000,
0xff098200,
0xacc90000,
0xff098200,
0x10000000,
0xff050801,
0xaccc0000,
0xff098200,
0xff06002e,
0x26650000,
0xff098200,
0x240c0000,
0xff098200,
0xaca80000,
0xff098200,
0x26660000,
0xff098200,
0xacac0000,
0xff098200,
0x240d0000,
0xff098200,
0xacc90000,
0xff098200,
0x10000000,
0xff050801,
0xaccd0000,
0xff098200,
0xff06002f,
0x448c0000,
0x46800021,
0x26660000,
0xff098200,
0xf4c00000,
0xff060030,
0xff06000b,
0xff000000,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x10400000,
0xff050803,
0x260d0000,
0xff098200,
0xd4400000,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000d,
0x8e900000,
0xff098200,
0xae120000,
0xff098200,
0x020d9023,
0x8e080000,
0xff098200,
0x10000000,
0xff050826,
0x24090010,
0xff060031,
0x26660000,
0xff098200,
0x240c0000,
0xff098200,
0xacc90000,
0xff098200,
0x10000000,
0xff050801,
0xaccc0000,
0xff098200,
0xff060032,
0x26650000,
0xff098200,
0x240c0000,
0xff098200,
0xaca80000,
0xff098200,
0x26660000,
0xff098200,
0xacac0000,
0xff098200,
0x240d0000,
0xff098200,
0xacc90000,
0xff098200,
0xff000000,
0x10000000,
0xff050801,
0xaccd0000,
0xff098200,
0xff060033,
0x448c0000,
0x46800021,
0x26660000,
0xff098200,
0xf4c00000,
0xff060034,
0xff06000b,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x10400000,
0xff050803,
0xd6e00000,
0x8e4b0000,
0x26520004,
0xf4400000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000d,
0x260d0000,
0xff098200,
0x8e900000,
0xff098200,
0xae120000,
0xff098200,
0x020d9023,
0x8e080000,
0xff098200,
0xf6000010,
0x10000000,
0xff050826,
0x24090018,
0xff060035,
0x8e790000,
0xff098200,
0x2652fffc,
0xae900000,
0xff098200,
0xafb20014,
0x316700ff,
0x0320f809,
0x02802021,
0xff06000d,
0x2c410002,
0x10200000,
0xff050836,
0x00027023,
0xff06000e,
0x964a0000,
0xff098200,
0x26520004,
0x3c0d0000,
0xff090200,
0xff000000,
0x000a5080,
0x014d5021,
0x014e5024,
0x024a9021,
0xff06002c,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff060037,
0x924d0000,
0xff098200,
0xd6e00000,
0x000d68c0,
0x020d6821,
0x10000000,
0xff05082c,
0xf5a00000,
0xff060038,
0x8eec0000,
0xff098200,
0x2d810000,
0xff098200,
0x10000000,
0xff05080e,
0x00017023,
0xff060039,
0x8eec0000,
0xff098200,
0x2d810000,
0xff098200,
0x10000000,
0xff05080e,
0x242effff,
0xff06003a,
0x8e790000,
0xff098200,
0x2652fffc,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x10000000,
0xff05080d,
0x00000000,
0xff06003b,
0xff000000,
0x8e790000,
0xff098200,
0x01602821,
0x2652fffc,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x10000000,
0xff05080d,
0x00000000,
0xff000000,
0xff06003c,
0x00c03821,
0xff06003d,
0x8e790000,
0xff098200,
0x316c00ff,
0xae900000,
0xff098200,
0xafb20014,
0x02e02821,
0xafac0010,
0x0320f809,
0x02802021,
0x10400000,
0xff05082c,
0x00000000,
0xff060036,
0x00506823,
0xac520000,
0xff098200,
0x02007021,
0x25b20000,
0xff098200,
0x00408021,
0x10000000,
0xff050824,
0x24090010,
0xff06003e,
0xff000000,
0x0080a821,
0xff000000,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0xff000000,
0x14400000,
0xff050836,
0x00000000,
0x10000000,
0xff05083f,
0x02a02021,
0xff000000,
0x10000000,
0xff050836,
0x00000000,
0xff000000,
0xff060025,
0x8e790000,
0xff098200,
0xae8e0000,
0xff098200,
0x2605fff8,
0xafb20014,
0x02093021,
0x0120a821,
0x0320f809,
0x02802021,
0x8e080000,
0xff098200,
0x26a90008,
0xae120000,
0xff098200,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff060040,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0x26e5fff8,
0xafb20014,
0x02e93021,
0x0120a821,
0x0320f809,
0x02802021,
0x8e0d0000,
0xff098200,
0x8ee80000,
0xff098200,
0x10000000,
0xff050841,
0x26a90008,
0xff060042,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0x02e02821,
0xafb20014,
0x0160a821,
0x0320f809,
0x02802021,
0xff000000,
0x32ac00ff,
0x24010000,
0xff098200,
0xff000000,
0x0015b942,
0x00155402,
0x32f707f8,
0xff000000,
0x11810000,
0xff070800,
0x000a50c0,
0x10000000,
0xff070800,
0x00000000,
0xff000000,
0x10000000,
0xff070800,
0x000a50c0,
0xff000000,
0xff060043,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x2617fff8,
0x8e120000,
0xff098200,
0x252a0008,
0x02e97021,
0xaee60000,
0xff098200,
0x260d0008,
0x120e0000,
0xff050845,
0xaee40000,
0xff098200,
0xff06000b,
0xd5a00000,
0xf5a0fff8,
0x15ae0000,
0xff05080b,
0x25ad0008,
0x10000000,
0xff050845,
0x00000000,
0xff060046,
0x8e060000,
0xff098200,
0x240d0000,
0xff098200,
0x11200000,
0xff050844,
0x2ccc0000,
0xff098200,
0x00cc680a,
0x01a06827,
0x000d68c0,
0x010d6821,
0x10000000,
0xff050847,
0xd5a00000,
0xff098200,
0xff060048,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0xff000000,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050806,
0x24010000,
0xff098200,
0xff06000b,
0x8c840000,
0xff098200,
0xff06000c,
0x8e690000,
0xff098200,
0x10800000,
0xff050849,
0x24060000,
0xff098200,
0x8c8c0000,
0xff098200,
0x24060000,
0xff098200,
0x8d2d0000,
0xff098200,
0x8c8e0000,
0xff098200,
0x01ac6824,
0x000d6140,
0x000d68c0,
0x018d6823,
0x01cd7021,
0x24010000,
0xff098200,
0xff06000d,
0x8dc70000,
0xff098200,
0x8dcc0000,
0xff098200,
0x8dcf0000,
0xff098200,
0x14e10000,
0xff050804,
0x8dc50000,
0xff098200,
0x11890000,
0xff050805,
0x8dcd0000,
0xff098200,
0xff06000e,
0xff000000,
0x11e00000,
0xff050849,
0x01e07021,
0x10000000,
0xff05080d,
0x00000000,
0xff06000f,
0x10be0000,
0xff050849,
0x00000000,
0x00a03021,
0x10000000,
0xff050849,
0x01a02021,
0xff060010,
0x10c10000,
0xff05080b,
0x2ccc0000,
0xff098200,
0x240d0000,
0xff098200,
0x00cc680a,
0x01a06827,
0x000d6880,
0x026d6821,
0x10000000,
0xff05080c,
0x8da40000,
0xff098200,
0xff06004a,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0x8e040000,
0xff098200,
0x8e050000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x24e70000,
0xff098200,
0x8c8d0000,
0xff098200,
0x908f0000,
0xff098200,
0x00ed0825,
0x14200000,
0xff050844,
0xff000000,
0x31e10000,
0xff090200,
0x10200000,
0xff050849,
0xac850000,
0xff098200,
0x8e6c0000,
0xff098200,
0x31ef0000,
0xff090200,
0xae640000,
0xff098200,
0xa08f0000,
0xff098200,
0x10000000,
0xff050849,
0xac8c0000,
0xff098200,
0xff06004b,
0x8e070000,
0xff098200,
0x2d210010,
0x8e050000,
0xff098200,
0x8e790000,
0xff098200,
0x24e70000,
0xff098200,
0x00270825,
0x14200000,
0xff050844,
0x26060008,
0x0320f809,
0x02802021,
0x10000000,
0xff050847,
0xd4400000,
0xff06004c,
0x8e040000,
0xff098200,
0x39210008,
0x2c840000,
0xff098200,
0x0001200b,
0x10800000,
0xff050844,
0xd6000000,
0x10000000,
0xff050847,
0x00000000,
0xff06004d,
0x11200000,
0xff050844,
0xff000000,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x10c10000,
0xff050849,
0x8e6d0000,
0xff098200,
0x2ccc0000,
0xff098200,
0x2dad0001,
0x018d6024,
0x11800000,
0xff050844,
0xae900000,
0xff098200,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0xafb20014,
0x8e790000,
0xff098200,
0x02802021,
0x0320f809,
0x02002821,
0x24060000,
0xff098200,
0x10000000,
0xff050849,
0x00402021,
0xff06004f,
0x8e040000,
0xff098200,
0x8e050000,
0xff098200,
0x11200000,
0xff050844,
0x02097021,
0x24010000,
0xff098200,
0xadde0000,
0xff098200,
0x14810000,
0xff050844,
0x8e120000,
0xff098200,
0x8e790000,
0xff098200,
0xff000000,
0xae900000,
0xff098200,
0xae900000,
0xff098200,
0x26060008,
0xafb20014,
0x0320f809,
0x02802021,
0x10400000,
0xff050849,
0x24060000,
0xff098200,
0xd6000008,
0x2617fff8,
0xd6020010,
0x240a0000,
0xff098200,
0xf6e00000,
0x10000000,
0xff050845,
0xf6e20008,
0xff060050,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e120000,
0xff098200,
0xff000000,
0x8c8e0000,
0xff098200,
0xd5000000,
0xff098200,
0x15c00000,
0xff050844,
0xff000000,
0xd5000000,
0xff098200,
0xff000000,
0x2617fff8,
0xae1e0000,
0xff098200,
0x240a0000,
0xff098200,
0x10000000,
0xff050845,
0xf6e00000,
0xff060051,
0x2d210010,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x8e070000,
0xff098200,
0x14200000,
0xff050844,
0xd60e0008,
0x24c60000,
0xff098200,
0x2ce10000,
0xff098200,
0x240c0001,
0x0006080b,
0x448c6000,
0x10200000,
0xff050844,
0x8e120000,
0xff098200,
0x46207024,
0x46806321,
0x8c8c0000,
0xff098200,
0x8c8d0000,
0xff098200,
0x440e0000,
0x2617fff8,
0x462c7380,
0x25ce0001,
0x01cc082b,
0x000e78c0,
0x01af7821,
0x10200000,
0xff050802,
0xf6ee0000,
0x8dee0000,
0xff098200,
0xd5e00000,
0xff06000b,
0x11de0000,
0xff050845,
0x240a0000,
0xff098200,
0x240a0000,
0xff098200,
0x10000000,
0xff050845,
0xf6e00008,
0xff06000c,
0x8c8c0000,
0xff098200,
0xff000000,
0x8e790000,
0xff098200,
0x11800000,
0xff050845,
0x240a0000,
0xff098200,
0x0320f809,
0x01c02821,
0x10400000,
0xff050845,
0x240a0000,
0xff098200,
0x8c4e0000,
0xff098200,
0x10000000,
0xff05080b,
0xd4400000,
0xff060052,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e120000,
0xff098200,
0xff000000,
0x8c8e0000,
0xff098200,
0xd5000000,
0xff098200,
0x15c00000,
0xff050844,
0xff000000,
0xd5000000,
0xff098200,
0xff000000,
0x2617fff8,
0xae000000,
0xff098200,
0xae000000,
0xff098200,
0x240a0000,
0xff098200,
0x10000000,
0xff050845,
0xf6e00000,
0xff060053,
0x926f0000,
0xff098200,
0x11200000,
0xff050844,
0x02007021,
0x26100008,
0x000f7802,
0xff0900a6,
0x31ef0001,
0x25f20000,
0xff098200,
0x10000000,
0xff050824,
0x2529fff8,
0xff060054,
0x2d210010,
0x8e070000,
0xff098200,
0x14200000,
0xff050844,
0xd60e0008,
0xd60c0000,
0x926d0000,
0xff098200,
0x24010000,
0xff098200,
0x02007021,
0x14e10000,
0xff050844,
0x26100010,
0x000f7802,
0xff0900a6,
0xf5ce0000,
0x31ef0001,
0xf5cc0008,
0x25f20000,
0xff098200,
0x10000000,
0xff050824,
0x2529fff0,
0xff060055,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0xff000000,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x908c0000,
0xff098200,
0x8c8d0000,
0xff098200,
0x8c850000,
0xff098200,
0x8c8e0000,
0xff098200,
0x258f0000,
0xff098200,
0x1de00000,
0xff050844,
0x01c57026,
0x15a00000,
0xff050844,
0x01cc0825,
0x8c8c0000,
0xff098200,
0x10200000,
0xff050844,
0x8e120000,
0xff098200,
0x00a97021,
0x018e082b,
0x14200000,
0xff050844,
0xafb20014,
0xae900000,
0xff098200,
0xff06000b,
0x26100008,
0x2529fff8,
0x25cefff8,
0xac8e0000,
0xff098200,
0x02096821,
0x00a03021,
0xae900000,
0xff098200,
0xff06000c,
0xd6000000,
0x020d082b,
0x10200000,
0xff050803,
0x26100008,
0xf4c00000,
0x10000000,
0xff05080c,
0x24c60008,
0xff06000d,
0x04110000,
0xff050821,
0x0080b821,
0xff06000e,
0xff000000,
0x8eee0000,
0xff098200,
0x2c410000,
0xff098200,
0x8eef0000,
0xff098200,
0x240c0000,
0xff098200,
0x8e900000,
0xff098200,
0xae6c0000,
0xff098200,
0x10200000,
0xff050808,
0x01ee5023,
0x8e8c0000,
0xff098200,
0x11400000,
0xff050806,
0x020a6821,
0x018d082b,
0x14200000,
0xff050809,
0x01ca7821,
0xaeee0000,
0xff098200,
0x02006821,
0xff06000f,
0xd5c00000,
0x25ce0008,
0x01cf082b,
0xf5a00000,
0x14200000,
0xff05080f,
0x25ad0008,
0xff060010,
0x324c0000,
0xff090200,
0x240d0000,
0xff098200,
0x2617fff8,
0xae0d0000,
0xff098200,
0x254a0010,
0xff060011,
0xafb20014,
0x11800000,
0xff050817,
0x0140a821,
0x10000000,
0xff050818,
0x00000000,
0xff060012,
0x25effff8,
0x240d0000,
0xff098200,
0xd5e00000,
0xaeef0000,
0xff098200,
0xff000000,
0x240a0000,
0xff098200,
0xae0d0000,
0xff098200,
0x2617fff8,
0xf6000000,
0x10000000,
0xff050811,
0x324c0000,
0xff090200,
0xff060013,
0x8e790000,
0xff098200,
0x000a28c2,
0x0320f809,
0x02802021,
0x10000000,
0xff05080e,
0x24020000,
0xff060056,
0x8d040000,
0xff098200,
0x908c0000,
0xff098200,
0x8c8d0000,
0xff098200,
0x8c850000,
0xff098200,
0x8c8e0000,
0xff098200,
0x258f0000,
0xff098200,
0x1de00000,
0xff050844,
0x01c57026,
0x15a00000,
0xff050844,
0x01cc0825,
0x8c8c0000,
0xff098200,
0x10200000,
0xff050844,
0x8e120000,
0xff098200,
0x00a97021,
0x018e082b,
0x14200000,
0xff050844,
0xafb20014,
0xae900000,
0xff098200,
0xff06000b,
0xac8e0000,
0xff098200,
0xff000000,
0x02096821,
0x00a03021,
0xae900000,
0xff098200,
0xff06000c,
0xd6000000,
0x020d082b,
0x10200000,
0xff050803,
0x26100008,
0xf4c00000,
0x10000000,
0xff05080c,
0x24c60008,
0xff06000d,
0x04110000,
0xff050821,
0x0080b821,
0xff06000e,
0x8eee0000,
0xff098200,
0x2c410000,
0xff098200,
0x8eef0000,
0xff098200,
0x240c0000,
0xff098200,
0x8e900000,
0xff098200,
0xae6c0000,
0xff098200,
0x10200000,
0xff050808,
0x01ee5023,
0x8e8c0000,
0xff098200,
0x11400000,
0xff050806,
0x020a6821,
0x018d082b,
0x14200000,
0xff050809,
0x01ca7821,
0xaeee0000,
0xff098200,
0x02006821,
0xff06000f,
0xd5c00000,
0x25ce0008,
0x01cf082b,
0xf5a00000,
0x14200000,
0xff05080f,
0x25ad0008,
0xff060010,
0x324c0000,
0xff090200,
0x0200b821,
0x254a0008,
0xff060011,
0xff000000,
0xafb20014,
0x11800000,
0xff050817,
0x0140a821,
0x10000000,
0xff050818,
0x00000000,
0xff060012,
0x8e790000,
0xff098200,
0x02e02821,
0x0320f809,
0x02802021,
0xff060013,
0x8e790000,
0xff098200,
0x000a28c2,
0x0320f809,
0x02802021,
0x10000000,
0xff05080e,
0x24020000,
0xff060057,
0x8e8c0000,
0xff098200,
0x02096821,
0xae900000,
0xff098200,
0x318c0000,
0xff090200,
0xae8d0000,
0xff098200,
0x11800000,
0xff050844,
0x24020000,
0xff098200,
0xae800000,
0xff098200,
0x10000000,
0xff05081a,
0xa2820000,
0xff098200,
0xff060058,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x46206005,
0xff060047,
0xff000000,
0x8e120000,
0xff098200,
0x2617fff8,
0x10000000,
0xff050859,
0xf600fff8,
0xff060049,
0x8e120000,
0xff098200,
0xae060000,
0xff098200,
0x2617fff8,
0xae040000,
0xff098200,
0xff060059,
0x240a0000,
0xff098200,
0xff060045,
0x324c0000,
0xff090200,
0x15800000,
0xff050818,
0x0140a821,
0x8e4bfffc,
0x000b4542,
0x310807f8,
0xff06000f,
0x0148082b,
0x14200000,
0xff050806,
0x000b6142,
0x318c07f8,
0x8e4b0000,
0x26520004,
0x02ec8023,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff060010,
0x02ea6821,
0x254a0008,
0x10000000,
0xff05080f,
0xadbe0000,
0xff098200,
0xff06005a,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x04110000,
0xff05085b,
0x00000000,
0x10000000,
0xff050847,
0xff000000,
0x00000000,
0xff06005c,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x04110000,
0xff05085d,
0x00000000,
0x10000000,
0xff050847,
0x00000000,
0xff06005e,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff06005f,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060060,
0x8e060000,
0xff098200,
0xff000000,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060061,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060062,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060063,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0xff000000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060064,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060065,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060066,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0xff000000,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060067,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060068,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff060069,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0x8e790000,
0xff098200,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x00000000,
0x0320f809,
0xd60c0000,
0x10000000,
0xff050847,
0x00000000,
0xff06006a,
0xff000000,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x8e790000,
0xff098200,
0x0320f809,
0x00000000,
0x10000000,
0xff050847,
0x00000000,
0xff06006b,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x8e790000,
0xff098200,
0x0320f809,
0x00000000,
0x10000000,
0xff050847,
0x00000000,
0xff06006c,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0xff000000,
0x018d6024,
0x11800000,
0xff050844,
0x8e790000,
0xff098200,
0x0320f809,
0x00000000,
0x10000000,
0xff050847,
0x00000000,
0xff06006d,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x46206004,
0x10000000,
0xff050847,
0x00000000,
0xff06006e,
0xff06006f,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0xd50e0000,
0xff098200,
0x10000000,
0xff050847,
0x462e6002,
0xff060070,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0xff000000,
0x018d6024,
0x11800000,
0xff050844,
0x462073a4,
0x8e790000,
0xff098200,
0x44067000,
0x0320f809,
0x00000000,
0x10000000,
0xff050847,
0x00000000,
0xff060071,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x8e790000,
0xff098200,
0x8e120000,
0xff098200,
0x0320f809,
0x26660000,
0xff098200,
0x8e6d0000,
0xff098200,
0x2617fff8,
0x448d7000,
0xf6e00000,
0x468073a1,
0xf6ee0008,
0x10000000,
0xff050845,
0x240a0000,
0xff098200,
0xff060072,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x8e790000,
0xff098200,
0x8e120000,
0xff098200,
0x0320f809,
0x2606fff8,
0x2617fff8,
0xf6000000,
0x10000000,
0xff050845,
0x240a0000,
0xff098200,
0xff060073,
0xff000000,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd6000000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x02097021,
0x260d0008,
0x11ae0000,
0xff050847,
0xff06000b,
0x8da60000,
0xff098200,
0xd5ac0000,
0x25ad0008,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x462c0034,
0x15ae0000,
0xff05080b,
0x46206011,
0x10000000,
0xff050847,
0x00000000,
0xff060074,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd6000000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x02097021,
0x260d0008,
0x11ae0000,
0xff050847,
0xff06000b,
0x8da60000,
0xff098200,
0xd5ac0000,
0x25ad0008,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x46206034,
0x15ae0000,
0xff05080b,
0x46206011,
0x10000000,
0xff050847,
0xff000000,
0x00000000,
0xff060075,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x00000000,
0x10000000,
0xff050876,
0x8c820000,
0xff098200,
0xff060077,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x39210008,
0x24c60000,
0xff098200,
0x00260825,
0x14200000,
0xff050844,
0x00000000,
0x8c8c0000,
0xff098200,
0x908d0000,
0xff098200,
0x2617fff8,
0x000c502b,
0x448d0000,
0x254a0001,
0x46800021,
0x8e120000,
0xff098200,
0x000a50c0,
0x10000000,
0xff050845,
0xf6e00000,
0xff060078,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0x8e060000,
0xff098200,
0xd60c0000,
0x24010008,
0x15210000,
0xff050844,
0xff000000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x24060001,
0x46206324,
0x27a50010,
0x2d810100,
0x440c6000,
0x10200000,
0xff050844,
0xafac0010,
0xff060079,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0x00402021,
0x10000000,
0xff050849,
0x24060000,
0xff098200,
0xff06007a,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0x2521fff0,
0x8e060000,
0xff098200,
0xd6000010,
0x8e0c0000,
0xff098200,
0x8e040000,
0xff098200,
0x04200000,
0xff050844,
0x8e050000,
0xff098200,
0xd6020008,
0x10200000,
0xff050801,
0x2407ffff,
0x46200024,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x44070000,
0xff06000b,
0x2ca10000,
0xff098200,
0xff000000,
0x10200000,
0xff050844,
0x24010000,
0xff098200,
0x462010a4,
0x15810000,
0xff050844,
0x8c850000,
0xff098200,
0x44061000,
0x00e0082a,
0x24ac0001,
0x00ec6821,
0x00c0782a,
0x01a1380b,
0x00cc6821,
0x01af300b,
0x240e0001,
0x00e0082a,
0x0006782a,
0x0001380b,
0x01cf300a,
0x00a7082a,
0x00a1380b,
0x00862821,
0x00e63023,
0x24a50000,
0xff098200,
0x04c10000,
0xff050879,
0x24c60001,
0xff06007b,
0x26640000,
0xff098200,
0x10000000,
0xff050849,
0x24060000,
0xff098200,
0xff06007c,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0x8e0c0000,
0xff098200,
0x2d210010,
0x8e070000,
0xff098200,
0x8e040000,
0xff098200,
0x258c0000,
0xff098200,
0xd6000008,
0x002c0825,
0x14200000,
0xff050844,
0x2ce10000,
0xff098200,
0x46200024,
0x10200000,
0xff050844,
0x8c8c0000,
0xff098200,
0x44060000,
0x8e6d0000,
0xff098200,
0xff000000,
0x24010001,
0x18c00000,
0xff05087b,
0x002c082b,
0x11800000,
0xff05087b,
0x01a6602b,
0x002c0825,
0x8e650000,
0xff098200,
0x14200000,
0xff050844,
0x908c0000,
0xff098200,
0x00a67021,
0xff06000b,
0x25ceffff,
0x00ae082b,
0x14200000,
0xff05080b,
0xa1cc0000,
0x10000000,
0xff050879,
0x00000000,
0xff06007d,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x11200000,
0xff050844,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e6d0000,
0xff098200,
0x8c860000,
0xff098200,
0x24840000,
0xff098200,
0x8e650000,
0xff098200,
0x01a6082b,
0x14200000,
0xff050844,
0x00867821,
0x00a63821,
0xff06000b,
0xff000000,
0x908d0000,
0x008f082b,
0x10200000,
0xff050879,
0x24840001,
0x24e7ffff,
0x10000000,
0xff05080b,
0xa0ed0000,
0xff06007e,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x11200000,
0xff050844,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e6d0000,
0xff098200,
0x8c860000,
0xff098200,
0x24840000,
0xff098200,
0x8e650000,
0xff098200,
0x01a6082b,
0x14200000,
0xff050844,
0x00867821,
0x00a03821,
0xff06000b,
0x908d0000,
0x008f082b,
0x10200000,
0xff050879,
0x25acffbf,
0x39ae0020,
0x2d81001a,
0x01c1680b,
0x24840001,
0xa0ed0000,
0x10000000,
0xff05080b,
0x24e70001,
0xff06007f,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0x018d0823,
0x04310000,
0xff05084e,
0xff000000,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x11200000,
0xff050844,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e6d0000,
0xff098200,
0x8c860000,
0xff098200,
0x24840000,
0xff098200,
0x8e650000,
0xff098200,
0x01a6082b,
0x14200000,
0xff050844,
0x00867821,
0x00a03821,
0xff06000b,
0x908d0000,
0x008f082b,
0x10200000,
0xff050879,
0x25acff9f,
0x39ae0020,
0x2d81001a,
0x01c1680b,
0x24840001,
0xa0ed0000,
0x10000000,
0xff05080b,
0x24e70001,
0xff060080,
0x11200000,
0xff050844,
0x8e060000,
0xff098200,
0x8e040000,
0xff098200,
0x24010000,
0xff098200,
0x14c10000,
0xff050844,
0x8e790000,
0xff098200,
0x0320f809,
0x00000000,
0x10000000,
0xff050876,
0x00000000,
0xff060081,
0x8e060000,
0xff098200,
0xff000000,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0x260d0008,
0x02097021,
0xff06000b,
0x8da70000,
0xff098200,
0x11ae0000,
0xff050876,
0xd5ac0000,
0x2ce10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44056000,
0x00451024,
0x10000000,
0xff05080b,
0x25ad0008,
0xff060082,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0x260d0008,
0x02097021,
0xff06000b,
0x8da70000,
0xff098200,
0x11ae0000,
0xff050876,
0xd5ac0000,
0x2ce10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44056000,
0x00451025,
0x10000000,
0xff05080b,
0x25ad0008,
0xff060083,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xff000000,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0x260d0008,
0x02097021,
0xff06000b,
0x8da70000,
0xff098200,
0x11ae0000,
0xff050876,
0xd5ac0000,
0x2ce10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44056000,
0x00451026,
0x10000000,
0xff05080b,
0x25ad0008,
0xff060084,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0x00026602,
0x00027202,
0x00026e00,
0x31ceff00,
0x018d6025,
0x3042ff00,
0x018e6025,
0x00021200,
0x10000000,
0xff050876,
0x01821025,
0xff060085,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0x10000000,
0xff050876,
0x00401027,
0xff060086,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0xff000000,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x463e6300,
0x463e7380,
0x44046000,
0x44057000,
0x10000000,
0xff050876,
0x00a41004,
0xff060087,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x463e6300,
0x463e7380,
0x44046000,
0x44057000,
0x10000000,
0xff050876,
0x00a41006,
0xff060088,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x463e6300,
0x463e7380,
0x44046000,
0x44057000,
0x10000000,
0xff050876,
0x00a41007,
0xff060089,
0x2d210010,
0x8e060000,
0xff098200,
0xff000000,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x463e6300,
0x463e7380,
0x44046000,
0x44057000,
0x24010020,
0x00256023,
0x00a42804,
0x01842006,
0x10000000,
0xff050876,
0x00851025,
0xff06008a,
0x2d210010,
0x8e060000,
0xff098200,
0x14200000,
0xff050844,
0x8e070000,
0xff098200,
0xd60c0000,
0xd60e0008,
0x2ccc0000,
0xff098200,
0x2ced0000,
0xff098200,
0x018d6024,
0x11800000,
0xff050844,
0x463e6300,
0x463e7380,
0x44046000,
0x44057000,
0x24010020,
0x00256023,
0x00a42806,
0x01842004,
0x10000000,
0xff050876,
0x00851025,
0xff06008b,
0x8e060000,
0xff098200,
0x11200000,
0xff050844,
0xd60c0000,
0x2cc10000,
0xff098200,
0x10200000,
0xff050844,
0x463e6300,
0x44026000,
0xff060076,
0x44820000,
0x10000000,
0xff050847,
0x46800021,
0xff060044,
0x8d0f0000,
0xff098200,
0xff000000,
0x02096821,
0x8e120000,
0xff098200,
0x25ac0000,
0xff098200,
0x8e8e0000,
0xff098200,
0xafb20014,
0x01cc082b,
0xae900000,
0xff098200,
0xae8d0000,
0xff098200,
0x14200000,
0xff050805,
0x01e0c821,
0x01e0f809,
0x02802021,
0x8e900000,
0xff098200,
0x000250c0,
0x1c400000,
0xff050845,
0x2617fff8,
0xff06000b,
0x8e8c0000,
0xff098200,
0x8e080000,
0xff098200,
0x14400000,
0xff050829,
0x01904823,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff060029,
0x324c0000,
0xff090200,
0x2401fffc,
0x15800000,
0xff050803,
0x02416824,
0x924d0000,
0xff098200,
0x000d68c0,
0xff06000d,
0x10000000,
0xff050824,
0x020d7023,
0xff06000f,
0x8e790000,
0xff098200,
0x24050000,
0xff098200,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0xff000000,
0x10000000,
0xff05080b,
0x24020000,
0xff06004e,
0x03e0a821,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0x02096021,
0xafb20014,
0xae8c0000,
0xff098200,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0x02a0f821,
0x8e8c0000,
0xff098200,
0x8e080000,
0xff098200,
0x03e00008,
0x01904823,
0xff06008c,
0xff000000,
0x926f0000,
0xff098200,
0x31e10000,
0xff090200,
0x14200000,
0xff050805,
0x8e6e0000,
0xff098200,
0x31e10000,
0xff090200,
0x14200000,
0xff050801,
0x25ceffff,
0x31e10000,
0xff090200,
0x10200000,
0xff050801,
0x00000000,
0x10000000,
0xff050801,
0xae6e0000,
0xff098200,
0xff000000,
0xff06008d,
0x926f0000,
0xff098200,
0x31e10000,
0xff090200,
0x10200000,
0xff050801,
0xff06000f,
0x8d810000,
0xff098200,
0x00200008,
0x00000000,
0xff06008e,
0x926f0000,
0xff098200,
0x8e6e0000,
0xff098200,
0x31e10000,
0xff090200,
0x14200000,
0xff05080f,
0x31e10000,
0xff090200,
0x10200000,
0xff05080f,
0x25ceffff,
0x11c00000,
0xff050801,
0xae6e0000,
0xff098200,
0x31e10000,
0xff090200,
0x10200000,
0xff05080f,
0xff06000b,
0x8e790000,
0xff098200,
0xafb50010,
0x02402821,
0xae900000,
0xff098200,
0x0320f809,
0x02802021,
0xff06000d,
0x8e900000,
0xff098200,
0xff06000e,
0xff000000,
0x8e4bfffc,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0xff098200,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06008f,
0x26520004,
0x10000000,
0xff05080e,
0x8d150000,
0xff098200,
0xff060090,
0xff000000,
0x8e0d0000,
0xff098200,
0x26640000,
0xff098200,
0xafb20014,
0x8dad0000,
0xff098200,
0x02402821,
0xae740000,
0xff098200,
0x91ad0000,
0xff098200,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0x000d68c0,
0x020d6821,
0x0320f809,
0xae8d0000,
0xff098200,
0x10000000,
0xff05080d,
0x00000000,
0xff000000,
0xff060091,
0xff000000,
0x10000000,
0xff050801,
0xff000000,
0x02402821,
0xff060092,
0xff000000,
0x36450001,
0xff06000b,
0xff000000,
0x8e790000,
0xff098200,
0x02096021,
0xafb20014,
0xae900000,
0xff098200,
0x02f0b823,
0xae8c0000,
0xff098200,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0x8e8c0000,
0xff098200,
0xafa00014,
0x01904823,
0x0217b821,
0x8e080000,
0xff098200,
0x00400008,
0x8e4bfffc,
0xff060093,
0xff000000,
0x27bd0000,
0xff098200,
0xf7a00000,
0xff098200,
0xafa00000,
0xff098200,
0xafa10000,
0xff098200,
0xf7a20000,
0xff098200,
0xafa20000,
0xff098200,
0xafa30000,
0xff098200,
0xf7a40000,
0xff098200,
0xafa40000,
0xff098200,
0xafa50000,
0xff098200,
0xf7a60000,
0xff098200,
0xafa60000,
0xff098200,
0xafa70000,
0xff098200,
0xf7a80000,
0xff098200,
0xafa80000,
0xff098200,
0xafa90000,
0xff098200,
0xf7aa0000,
0xff098200,
0xafaa0000,
0xff098200,
0xafab0000,
0xff098200,
0xf7ac0000,
0xff098200,
0xafac0000,
0xff098200,
0xafad0000,
0xff098200,
0xf7ae0000,
0xff098200,
0xff000000,
0xafae0000,
0xff098200,
0xafaf0000,
0xff098200,
0xf7b00000,
0xff098200,
0xafb00000,
0xff098200,
0xafb10000,
0xff098200,
0xf7b20000,
0xff098200,
0xafb20000,
0xff098200,
0xafb30000,
0xff098200,
0xf7b40000,
0xff098200,
0xafb40000,
0xff098200,
0xafb50000,
0xff098200,
0xf7b60000,
0xff098200,
0xafb60000,
0xff098200,
0xafb70000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb80000,
0xff098200,
0xafb90000,
0xff098200,
0xf7ba0000,
0xff098200,
0xafba0000,
0xff098200,
0xafbb0000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafbc0000,
0xff098200,
0xf7be0000,
0xff098200,
0xff000000,
0xafbe0000,
0xff098200,
0xafa00000,
0xff098200,
0x240c0000,
0xff098200,
0x27ae0000,
0xff098200,
0x27d30000,
0xff098200,
0x8dcd0000,
0xae6c0000,
0xff098200,
0xafae0000,
0xff098200,
0x8e740000,
0xff098200,
0x8e700000,
0xff098200,
0x8e790000,
0xff098200,
0xae740000,
0xff098200,
0xae7f0000,
0xff098200,
0xae6d0000,
0xff098200,
0x26640000,
0xff098200,
0xae900000,
0xff098200,
0x0320f809,
0x27a50010,
0x8e8d0000,
0xff098200,
0x2401fffc,
0x8e900000,
0xff098200,
0x01a1e824,
0x8fb20014,
0x10000000,
0xff050801,
0xafb40070,
0xff000000,
0xff060094,
0xff000000,
0x8fb40070,
0x27d30000,
0xff098200,
0xff06000b,
0x04400000,
0xff050803,
0x8e0d0000,
0xff098200,
0x3c0f59c0,
0x0002a8c0,
0x241e0000,
0xff098200,
0xafb50010,
0x448ff000,
0x8dad0000,
0xff098200,
0xae600000,
0xff098200,
0x8db10000,
0xff098200,
0x4600f7a1,
0x8e4b0000,
0x26520004,
0xae7e0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x2dae0000,
0xff098200,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x11c00000,
0xff050802,
0x32f707f8,
0x00200008,
0x000a50c0,
0xff06000c,
0x26a9fff8,
0x00200008,
0x02f0b820,
0xff06000d,
0x8e790000,
0xff098200,
0x00022823,
0x0320f809,
0x02802021,
0xff000000,
0xff06005b,
0x3c0c4330,
0x44802000,
0x448c2800,
0x46206085,
0x44016800,
0x46241034,
0x46241000,
0x45000000,
0xff050801,
0x46240001,
0x0020082a,
0x3c0c3ff0,
0x46200087,
0x448c2800,
0x46211013,
0x46206034,
0x46240081,
0x03e00008,
0x46211011,
0xff06000b,
0x03e00008,
0x46206006,
0xff06005d,
0x3c0c4330,
0x44802000,
0x448c2800,
0x46206085,
0x44016800,
0x46241034,
0x46241000,
0x45000000,
0xff050801,
0x46240001,
0x0020082a,
0x3c0cbff0,
0x46200087,
0x448c2800,
0x46211013,
0x462c0034,
0x46240081,
0x03e00008,
0x46211011,
0xff06000b,
0x03e00008,
0x46206006,
0xff060095,
0xff000000,
0x3c0c4330,
0x44802000,
0x448c2800,
0x46206085,
0x44016800,
0x46241034,
0x46241000,
0x45000000,
0xff050801,
0x46240001,
0x0020082a,
0x3c0c3ff0,
0x448c2800,
0x46201034,
0x46240081,
0x46211011,
0x46200087,
0x03e00008,
0x46211013,
0xff06000b,
0x03e00008,
0x46206006,
0xff000000,
0xff060096,
0xff000000,
0x27bdff90,
0xafbf0000,
0xff098200,
0xafbe0000,
0xff098200,
0xf7be0000,
0xff098200,
0xafb70000,
0xff098200,
0xafb60000,
0xff098200,
0xf7bc0000,
0xff098200,
0xafb50000,
0xff098200,
0xafb40000,
0xff098200,
0xf7ba0000,
0xff098200,
0xafb30000,
0xff098200,
0xafb20000,
0xff098200,
0xf7b80000,
0xff098200,
0xafb10000,
0xff098200,
0xafb00000,
0xff098200,
0xf7b60000,
0xff098200,
0xf7b40000,
0xff098200,
0x8c520000,
0xff098200,
0x24530000,
0xff098200,
0x8e790000,
0xff098200,
0xae410000,
0xff098200,
0xae440000,
0xff098200,
0xae450000,
0xff098200,
0xf64c0000,
0xff098200,
0xff000000,
0xae460000,
0xff098200,
0xae470000,
0xff098200,
0xf64e0000,
0xff098200,
0x27ac0000,
0xff098200,
0xae4c0000,
0xff098200,
0xafa00014,
0x03a02821,
0x0320f809,
0x02402021,
0x8c500000,
0xff098200,
0x8c490000,
0xff098200,
0x0040a021,
0x3c0f59c0,
0x8e080000,
0xff098200,
0x448ff000,
0x240c0000,
0xff098200,
0x241e0000,
0xff098200,
0x01304823,
0xae6c0000,
0xff098200,
0x4600f7a1,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff000000,
0xff060028,
0xff000000,
0x8e790000,
0xff098200,
0x8e720000,
0xff098200,
0xae900000,
0xff098200,
0xae880000,
0xff098200,
0xae540000,
0xff098200,
0x02e02821,
0x0320f809,
0x02402021,
0x8e420000,
0xff098200,
0xd6400000,
0xff098200,
0x8e430000,
0xff098200,
0x10000000,
0xff05081a,
0xd6420000,
0xff098200,
0xff000000,
0xff060097,
0xff000000,
0x8c8d0000,
0xff098200,
0x90850000,
0xff098200,
0x03a07021,
0x03ade823,
0xaddffffc,
0x00052880,
0xadd0fff8,
0xadc4fff4,
0x01c08021,
0x248d0000,
0xff098200,
0x27ae0010,
0x10a00000,
0xff050802,
0x01a57821,
0xff06000b,
0x8dac0000,
0x25ad0004,
0x01af082b,
0xadcc0000,
0x14200000,
0xff05080b,
0x25ce0004,
0xff06000c,
0x8c990000,
0xff098200,
0x8c850000,
0xff098200,
0x8c860000,
0xff098200,
0x8c870000,
0xff098200,
0xd48c0000,
0xff098200,
0xd48e0000,
0xff098200,
0x0320f809,
0x8c840000,
0xff098200,
0x8e0dfff4,
0x8e0efff8,
0x8e1ffffc,
0xada20000,
0xff098200,
0xada30000,
0xff098200,
0xf5a00000,
0xff098200,
0xf5a20000,
0xff098200,
0x0200e821,
0x03e00008,
0x01c08021,
0xff000000,
0xff080000,
0xff000000,
0x02172821,
0x020a3021,
0x8cac0000,
0xff098200,
0x8ccd0000,
0xff098200,
0xd4a00000,
0xd4c20000,
0x2d8c0000,
0xff098200,
0x2dad0000,
0xff098200,
0x964e0000,
0xff098200,
0x018d6024,
0x26520004,
0x11800000,
0xff050835,
0x3c0d0000,
0xff090200,
0x000e7080,
0x01cd7021,
0xff000000,
0x46220034,
0xff000000,
0x46220036,
0xff000000,
0x00007001,
0xff000000,
0x00017001,
0xff000000,
0x024e9021,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x0217b821,
0x26520004,
0x8eec0000,
0xff098200,
0xd6e00000,
0x020a5021,
0x964e0000,
0xff098200,
0x8d4d0000,
0xff098200,
0xd5420000,
0x3c0f0000,
0xff090200,
0x2d810000,
0xff098200,
0x2da40000,
0xff098200,
0x000e7080,
0x00240824,
0x10200000,
0xff050805,
0x01cf7021,
0x46220032,
0xff000000,
0x00007001,
0xff000000,
0x00017001,
0xff000000,
0xff06000b,
0x024e9021,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8ee50000,
0xff098200,
0x8d460000,
0xff098200,
0xff000000,
0x240f0000,
0xff098200,
0x118f0000,
0xff05083b,
0xff000000,
0x2d810000,
0xff098200,
0xff000000,
0x11af0000,
0xff05083b,
0xff000000,
0x00a67826,
0x01ac6826,
0x2d840000,
0xff098200,
0x0001780a,
0x000d200b,
0x01af0825,
0x0001200a,
0x10800000,
0xff05080b,
0xff000000,
0x0001700b,
0xff000000,
0x0001700a,
0xff000000,
0x8cad0000,
0xff098200,
0x11a00000,
0xff05080b,
0x00000000,
0x91ad0000,
0xff098200,
0x31ad0000,
0xff090200,
0x15a00000,
0xff05080b,
0x00000000,
0x10000000,
0xff05083a,
0x24070000,
0xff098200,
0xff000000,
0x0217b821,
0x26520004,
0x8eec0000,
0xff098200,
0x000a5042,
0x8eef0000,
0xff098200,
0x022a5023,
0x964e0000,
0xff098200,
0xff000000,
0x24010000,
0xff098200,
0x11810000,
0xff05083b,
0xff000000,
0x8d4dfffc,
0x258c0000,
0xff098200,
0x000e7080,
0x01af6826,
0x018d6025,
0x3c0f0000,
0xff090200,
0x01cf7021,
0xff000000,
0x000c700b,
0xff000000,
0x000c700a,
0xff000000,
0x024e9021,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x0217b821,
0x26520004,
0x8eec0000,
0xff098200,
0xd6e00000,
0x022a5021,
0x964e0000,
0xff098200,
0xd5420000,
0x3c0f0000,
0xff090200,
0x2d810000,
0xff098200,
0x000e7080,
0xff000000,
0x10200000,
0xff050805,
0xff000000,
0x10200000,
0xff050801,
0xff000000,
0x01cf7021,
0x46220032,
0xff000000,
0x00007001,
0x024e9021,
0xff06000b,
0xff000000,
0x00017001,
0xff06000b,
0x024e9021,
0xff000000,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0xff06000f,
0x24010000,
0xff098200,
0x11810000,
0xff05083b,
0x00000000,
0x10000000,
0xff05080b,
0x00000000,
0xff000000,
0x0217b821,
0x000a68c2,
0x8eec0000,
0xff098200,
0x964e0000,
0xff098200,
0x01a06827,
0x26520004,
0xff000000,
0x24010000,
0xff098200,
0x11810000,
0xff05083b,
0xff000000,
0x018d6026,
0x000e7080,
0x3c0f0000,
0xff090200,
0x01cf7021,
0xff000000,
0x000c700b,
0xff000000,
0x000c700a,
0xff000000,
0x024e9021,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x020a5021,
0x964e0000,
0xff098200,
0x8d4c0000,
0xff098200,
0x26520004,
0xff000000,
0x2d8c0000,
0xff098200,
0x000e7080,
0x3c0f0000,
0xff090200,
0x01cf7021,
0xff000000,
0x000c700a,
0xff000000,
0x000c700b,
0xff000000,
0x024e9021,
0xff000000,
0x2d8c0000,
0xff098200,
0xd5400000,
0xff000000,
0x11800000,
0xff050801,
0xff000000,
0x15800000,
0xff050801,
0xff000000,
0x0217b821,
0x000e7080,
0x3c0f0000,
0xff090200,
0x01cf7021,
0xf6e00000,
0x024e9021,
0xff06000b,
0xff000000,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x020a5021,
0x0217b821,
0xd5400000,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x020a5021,
0x0217b821,
0x8d4c0000,
0xff098200,
0x240d0000,
0xff098200,
0x2d8c0000,
0xff098200,
0x258d0000,
0xff098200,
0x8e4b0000,
0x26520004,
0xaeed0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x020a3021,
0x0217b821,
0x8ccc0000,
0xff098200,
0xd4c00000,
0x2d810000,
0xff098200,
0x10200000,
0xff05083c,
0x46200007,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x020a2821,
0x0217b821,
0x8cac0000,
0xff098200,
0x8ca40000,
0xff098200,
0x24010000,
0xff098200,
0x15810000,
0xff050802,
0x24010000,
0xff098200,
0x8c820000,
0xff098200,
0xff06000b,
0x44820000,
0x46800021,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000c,
0x15810000,
0xff05083e,
0x00000000,
0xff000000,
0x8c8e0000,
0xff098200,
0x15c00000,
0xff050809,
0x00000000,
0xff06000d,
0xff000000,
0xff06003f,
0x8e790000,
0xff098200,
0x0320f809,
0x00000000,
0x10000000,
0xff05080b,
0x00000000,
0xff000000,
0xff060013,
0x91cc0000,
0xff098200,
0x318c0000,
0xff090200,
0x15800000,
0xff05080d,
0x00000000,
0x10000000,
0xff05083e,
0x00000000,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0x4636a000,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0x4636a001,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0x4636a002,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0x4636a003,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0xff060098,
0x04110000,
0xff05085b,
0x4636a303,
0x46360002,
0x4620a001,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0xff000000,
0x02083021,
0x02293821,
0x8ccd0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0xff000000,
0x02083821,
0x02293021,
0x8ced0000,
0xff098200,
0xd4f60000,
0xd4d40000,
0x2da10000,
0xff098200,
0xff000000,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4d40000,
0xd4f60000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0xff000000,
0x10200000,
0xff05083d,
0x0217b821,
0x10000000,
0xff050898,
0x00000000,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0x02083021,
0x02093821,
0x8ccd0000,
0xff098200,
0x8cee0000,
0xff098200,
0xd4cc0000,
0xd4ee0000,
0x2da10000,
0xff098200,
0x2dcc0000,
0xff098200,
0x002c0824,
0x8e790000,
0xff098200,
0x10200000,
0xff05083d,
0x0217b821,
0x0320f809,
0x00000000,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0x01283023,
0xae900000,
0xff098200,
0x02092821,
0x0100a821,
0xff06002b,
0x8e790000,
0xff098200,
0x000630c2,
0xafb20014,
0x0320f809,
0x02802021,
0x14400000,
0xff050836,
0x8e900000,
0xff098200,
0x02154021,
0xd5000000,
0x0217b821,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000a6842,
0x022d6823,
0x8e4b0000,
0x26520004,
0x8dacfffc,
0x0217b821,
0x240e0000,
0xff098200,
0xaeec0000,
0xff098200,
0xaeee0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000a6842,
0x022d6823,
0x8e4b0000,
0x26520004,
0x8dacfffc,
0x0217b821,
0x240e0000,
0xff098200,
0xaeec0000,
0xff098200,
0xaeee0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000b5403,
0x448a0000,
0x0217b821,
0x46800021,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x022a5021,
0x0217b821,
0xd5400000,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000a68c2,
0x0217b821,
0x01a06027,
0x8e4b0000,
0x26520004,
0xaeec0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x0217b821,
0xaefe0000,
0xff098200,
0x26f70008,
0x020a5021,
0xff06000b,
0xaefe0000,
0xff098200,
0x02ea082a,
0x14200000,
0xff05080b,
0x26f70008,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e080000,
0xff098200,
0x000a5042,
0x01485021,
0x8d480000,
0xff098200,
0x8e4b0000,
0x26520004,
0x8d0d0000,
0xff098200,
0xd5a00000,
0x0217b821,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e080000,
0xff098200,
0x0017b842,
0x020a5021,
0x02e8b821,
0xd5400000,
0x8ee80000,
0xff098200,
0x910f0000,
0xff098200,
0x8d050000,
0xff098200,
0x31ef0000,
0xff090200,
0x910c0000,
0xff098200,
0x8d4e0000,
0xff098200,
0xf4a00000,
0x24010000,
0xff098200,
0x01ec7825,
0x11e10000,
0xff050802,
0x25ce0000,
0xff098200,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000c,
0x2dc10000,
0xff098200,
0x10200000,
0xff05080b,
0x8d4d0000,
0xff098200,
0x91af0000,
0xff098200,
0x31ef0000,
0xff090200,
0x11e00000,
0xff05080b,
0x8e790000,
0xff098200,
0x0320f809,
0x26640000,
0xff098200,
0x10000000,
0xff05080b,
0x00000000,
0xff000000,
0x8e080000,
0xff098200,
0x0017b842,
0x000a6842,
0x02e8b821,
0x022d6823,
0x8ee80000,
0xff098200,
0x8dadfffc,
0x910e0000,
0xff098200,
0x8d050000,
0xff098200,
0x91af0000,
0xff098200,
0x31c10000,
0xff090200,
0x910e0000,
0xff098200,
0x240c0000,
0xff098200,
0xacad0000,
0xff098200,
0x14200000,
0xff050802,
0xacac0000,
0xff098200,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000c,
0x11c00000,
0xff05080b,
0x31e10000,
0xff090200,
0x10200000,
0xff05080b,
0x8e790000,
0xff098200,
0x0320f809,
0x26640000,
0xff098200,
0x10000000,
0xff05080b,
0x00000000,
0xff000000,
0x8e080000,
0xff098200,
0x0017b842,
0x022a5021,
0x02e8b821,
0xd5400000,
0x8ee80000,
0xff098200,
0x8e4b0000,
0x26520004,
0x8d0d0000,
0xff098200,
0xf5a00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e080000,
0xff098200,
0x0017b842,
0x000a60c2,
0x02e8b821,
0x01806027,
0x8ee80000,
0xff098200,
0x8e4b0000,
0x26520004,
0x8d0d0000,
0xff098200,
0xadac0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e8e0000,
0xff098200,
0x000a6042,
0x3c010000,
0xff090200,
0x01816021,
0x024c9021,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0x11c00000,
0xff050801,
0x02802021,
0x0320f809,
0x02172821,
0x8e900000,
0xff098200,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x000a6842,
0x8e790000,
0xff098200,
0x022d6823,
0x8e060000,
0xff098200,
0x8da5fffc,
0xae900000,
0xff098200,
0xafb20014,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0x240c0000,
0xff098200,
0x8e4b0000,
0x26520004,
0x0217b821,
0xaeec0000,
0xff098200,
0xaee20000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e6c0000,
0xff098200,
0x8e6d0000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x018d082b,
0x10200000,
0xff050805,
0xff06000b,
0xff000000,
0x8e790000,
0xff098200,
0x000a28c2,
0x30a507ff,
0x240c0801,
0x24a1f801,
0x000a3382,
0x0181280a,
0x0320f809,
0x02802021,
0xff000000,
0x8e790000,
0xff098200,
0x000a6842,
0x022d6823,
0x02802021,
0x0320f809,
0x8da5fffc,
0xff000000,
0x8e900000,
0xff098200,
0x8e4b0000,
0x26520004,
0x0217b821,
0x240c0000,
0xff098200,
0xaee20000,
0xff098200,
0xaeec0000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8e790000,
0xff098200,
0x0140a821,
0x0320f809,
0x02802021,
0x10000000,
0xff05080b,
0x02a05021,
0xff000000,
0x8e0e0000,
0xff098200,
0x000a6842,
0x022d6823,
0x8dc80000,
0xff098200,
0x8da9fffc,
0xff000000,
0x10000000,
0xff050899,
0xff000000,
0x10000000,
0xff05089a,
0xff000000,
0x0217b821,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0x02082821,
0x02093021,
0x8cad0000,
0xff098200,
0x8cce0000,
0xff098200,
0x8ca80000,
0xff098200,
0x24010000,
0xff098200,
0xd4c00000,
0x15a10000,
0xff050830,
0x0217b821,
0x2dc10000,
0xff098200,
0x10200000,
0xff050805,
0x24010000,
0xff098200,
0x462000a4,
0x8d0c0000,
0xff098200,
0x440e1000,
0x46801121,
0x8d0d0000,
0xff098200,
0x46240032,
0x01cc082b,
0x00000801,
0x000e70c0,
0x10200000,
0xff050830,
0x01ae7021,
0x8dcc0000,
0xff098200,
0x119e0000,
0xff050802,
0xd5c00000,
0xff06000b,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000c,
0x8d0e0000,
0xff098200,
0x11c00000,
0xff05080b,
0x00000000,
0x91cc0000,
0xff098200,
0x318c0000,
0xff090200,
0x15800000,
0xff05080b,
0x00000000,
0x10000000,
0xff050830,
0x00000000,
0xff06000f,
0x15c10000,
0xff050830,
0xff000000,
0x8cc90000,
0xff098200,
0x10000000,
0xff050899,
0x00000000,
0xff000000,
0x000b4542,
0x310807f8,
0x02082821,
0x000b4b82,
0x8cac0000,
0xff098200,
0x312903fc,
0x24010000,
0xff098200,
0x8ca80000,
0xff098200,
0x02293023,
0x8cc9fffc,
0x15810000,
0xff05082d,
0x0217b821,
0xff060099,
0x8d0c0000,
0xff098200,
0x8d2d0000,
0xff098200,
0x8d0e0000,
0xff098200,
0x01ac6824,
0x000d6140,
0x000d68c0,
0x018d6823,
0x01cd7021,
0xff06000b,
0x8dc40000,
0xff098200,
0x8dcc0000,
0xff098200,
0x8dcd0000,
0xff098200,
0x8dc50000,
0xff098200,
0x24840000,
0xff098200,
0x01896026,
0x008c0825,
0x14200000,
0xff050804,
0x8d0f0000,
0xff098200,
0x10be0000,
0xff050805,
0x8dc40000,
0xff098200,
0xff06000d,
0x8e4b0000,
0x26520004,
0xaee50000,
0xff098200,
0xaee40000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000e,
0x15a00000,
0xff05080b,
0xff000000,
0x01a07021,
0xff06000f,
0x11e00000,
0xff05080d,
0x24050000,
0xff098200,
0x91ec0000,
0xff098200,
0x318c0000,
0xff090200,
0x15800000,
0xff05080d,
0x00000000,
0x10000000,
0xff05082e,
0x00000000,
0xff000000,
0x000b4542,
0x310807f8,
0x02082821,
0x314907f8,
0x8ca40000,
0xff098200,
0x24010000,
0xff098200,
0x8ca80000,
0xff098200,
0x0217b821,
0x14810000,
0xff05082f,
0x000960c2,
0x8d0d0000,
0xff098200,
0x8d0e0000,
0xff098200,
0x018d082b,
0x10200000,
0xff05082f,
0x01c94821,
0x8d2d0000,
0xff098200,
0x11be0000,
0xff050805,
0xd5200000,
0xff06000b,
0x8e4b0000,
0x26520004,
0xf6e00000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8d0e0000,
0xff098200,
0x11c00000,
0xff05080b,
0x00000000,
0x91cd0000,
0xff098200,
0x31ad0000,
0xff090200,
0x15a00000,
0xff05080b,
0x00000000,
0x10000000,
0xff05082f,
0x00000000,
0xff000000,
0x000b4542,
0x310807f8,
0x314907f8,
0x02082821,
0x02093021,
0x8cad0000,
0xff098200,
0x8cce0000,
0xff098200,
0x8ca80000,
0xff098200,
0x24010000,
0xff098200,
0xd4c00000,
0x15a10000,
0xff050834,
0x0217b821,
0x2dc10000,
0xff098200,
0x10200000,
0xff050805,
0x24010000,
0xff098200,
0x462000a4,
0x8d0c0000,
0xff098200,
0x440e1000,
0x46801121,
0x8d0d0000,
0xff098200,
0x46240032,
0x01cc082b,
0x00000801,
0x000e70c0,
0x10200000,
0xff050834,
0x01ae6821,
0x910f0000,
0xff098200,
0x8dac0000,
0xff098200,
0x119e0000,
0xff050803,
0xd6e00000,
0xff06000b,
0x31e10000,
0xff090200,
0x14200000,
0xff050807,
0xf5a00000,
0xff06000c,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000d,
0x8d0e0000,
0xff098200,
0x11c00000,
0xff05080b,
0x00000000,
0x91ce0000,
0xff098200,
0x31ce0000,
0xff090200,
0xff000000,
0x15c00000,
0xff05080b,
0x00000000,
0x10000000,
0xff050834,
0x00000000,
0xff06000f,
0x15c10000,
0xff050834,
0x8cc90000,
0xff098200,
0x10000000,
0xff05089a,
0x00000000,
0xff060011,
0x8e6c0000,
0xff098200,
0x31ef0000,
0xff090200,
0xae680000,
0xff098200,
0xa10f0000,
0xff098200,
0x10000000,
0xff05080c,
0xad0c0000,
0xff098200,
0xff000000,
0x000b4542,
0x310807f8,
0x02082821,
0x000b4b82,
0x8cac0000,
0xff098200,
0x312903fc,
0x24010000,
0xff098200,
0x02293023,
0x8ca80000,
0xff098200,
0x8cc9fffc,
0x15810000,
0xff050831,
0x0217b821,
0xff06009a,
0x8d0c0000,
0xff098200,
0x8d2d0000,
0xff098200,
0x8d0e0000,
0xff098200,
0xa1000000,
0xff098200,
0x01ac6824,
0x000d6140,
0x000d68c0,
0x018d6823,
0x01cd7021,
0xd6f40000,
0xff06000b,
0x8dc40000,
0xff098200,
0x8dcc0000,
0xff098200,
0x24010000,
0xff098200,
0x8dcd0000,
0xff098200,
0x14810000,
0xff050805,
0x8dc50000,
0xff098200,
0x15890000,
0xff050805,
0x910f0000,
0xff098200,
0x10be0000,
0xff050804,
0x8d0c0000,
0xff098200,
0xff06000c,
0x31e10000,
0xff090200,
0x14200000,
0xff050807,
0xff000000,
0xf5d40000,
0xff098200,
0xff06000d,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000e,
0x11800000,
0xff05080c,
0x00000000,
0x918c0000,
0xff098200,
0x318c0000,
0xff090200,
0x15800000,
0xff05080c,
0x00000000,
0x10000000,
0xff050832,
0x00000000,
0xff06000f,
0x15a00000,
0xff05080b,
0x01a07021,
0x8d0e0000,
0xff098200,
0x11c00000,
0xff050806,
0x26660000,
0xff098200,
0x91cc0000,
0xff098200,
0x318c0000,
0xff090200,
0x11800000,
0xff050832,
0x24010000,
0xff098200,
0xff060010,
0x8e790000,
0xff098200,
0xacc90000,
0xff098200,
0xacc10000,
0xff098200,
0xae900000,
0xff098200,
0x01002821,
0xafb20014,
0x0320f809,
0x02802021,
0x8e900000,
0xff098200,
0xff000000,
0x10000000,
0xff05080d,
0xf4540000,
0xff060011,
0x8e6c0000,
0xff098200,
0x31ef0000,
0xff090200,
0xae680000,
0xff098200,
0xa10f0000,
0xff098200,
0x10000000,
0xff05080d,
0xad0c0000,
0xff098200,
0xff000000,
0x000b4542,
0x310807f8,
0x02082821,
0x314907f8,
0x8ca40000,
0xff098200,
0x24010000,
0xff098200,
0x8ca80000,
0xff098200,
0x0217b821,
0x14810000,
0xff050833,
0x000960c2,
0x8d0d0000,
0xff098200,
0x8d0e0000,
0xff098200,
0x018d082b,
0x10200000,
0xff050833,
0x01c94821,
0x8d2d0000,
0xff098200,
0x910f0000,
0xff098200,
0x11be0000,
0xff050805,
0xd6e00000,
0xff06000b,
0x31e10000,
0xff090200,
0x14200000,
0xff050807,
0xf5200000,
0xff06000c,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8d0e0000,
0xff098200,
0x11c00000,
0xff05080b,
0x00000000,
0x91cd0000,
0xff098200,
0x31ad0000,
0xff090200,
0x15a00000,
0xff05080b,
0x00000000,
0x10000000,
0xff050833,
0x00000000,
0xff060011,
0x8e6c0000,
0xff098200,
0xff000000,
0x31ef0000,
0xff090200,
0xae680000,
0xff098200,
0xa10f0000,
0xff098200,
0x10000000,
0xff05080c,
0xad0c0000,
0xff098200,
0xff000000,
0x0217b821,
0xff06000b,
0x022a7821,
0x8ee50000,
0xff098200,
0x26acfff8,
0x8def0000,
0xff098200,
0x11800000,
0xff050804,
0x000c30c2,
0x00cf3021,
0x8cae0000,
0xff098200,
0x000f68c0,
0x90af0000,
0xff098200,
0x8ca40000,
0xff098200,
0x01c6082b,
0x14200000,
0xff050805,
0x02ec7021,
0x01a46821,
0x31ec0000,
0xff090200,
0xff06000d,
0xd6e00000,
0x26f70008,
0x02ee082b,
0xf5a00000,
0x14200000,
0xff05080d,
0x25ad0008,
0x15800000,
0xff050807,
0x00000000,
0xff06000e,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8e790000,
0xff098200,
0xae900000,
0xff098200,
0xafb20014,
0x01408021,
0x0320f809,
0x02802021,
0x02005021,
0x10000000,
0xff05080b,
0x8e900000,
0xff098200,
0xff060011,
0x8e6c0000,
0xff098200,
0x31ef0000,
0xff090200,
0xae650000,
0xff098200,
0xa0af0000,
0xff098200,
0xff000000,
0x10000000,
0xff05080e,
0xacac0000,
0xff098200,
0xff000000,
0x314907f8,
0x10000000,
0xff05089b,
0x01354821,
0xff000000,
0x314907f8,
0xff06009b,
0x02007021,
0x02178021,
0x24010000,
0xff098200,
0x8e0c0000,
0xff098200,
0x8e080000,
0xff098200,
0x26100008,
0x15810000,
0xff050825,
0x2529fff8,
0xae120000,
0xff098200,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff000000,
0x01555021,
0xff000000,
0x0217b821,
0x24010000,
0xff098200,
0x8eec0000,
0xff098200,
0x8ee80000,
0xff098200,
0x01404821,
0x8e0d0000,
0xff098200,
0x26f70008,
0x15810000,
0xff050840,
0x2529fff8,
0xff060041,
0x31ac0000,
0xff090200,
0x910f0000,
0xff098200,
0x15800000,
0xff050807,
0x39ae0000,
0xff090200,
0xff06000b,
0xae080000,
0xff098200,
0x2de10002,
0x02007021,
0x11200000,
0xff050803,
0x01207821,
0xff06000c,
0xd6e00000,
0x26f70008,
0x25effff8,
0xf5c00000,
0x15e00000,
0xff05080c,
0x25ce0008,
0xff06000d,
0x01816025,
0x11800000,
0xff050805,
0x00000000,
0xff06000e,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff06000f,
0x8dabfffc,
0x000bb942,
0x32f707f8,
0x02176823,
0x8dad0000,
0xff098200,
0x8dad0000,
0xff098200,
0x10000000,
0xff05080e,
0xff000000,
0x8db10000,
0xff098200,
0xff060011,
0x31c10000,
0xff090200,
0x14200000,
0xff05080b,
0x020e7023,
0x01c08021,
0x8dcd0000,
0xff098200,
0x10000000,
0xff05080b,
0x31ac0000,
0xff090200,
0xff000000,
0x02007021,
0x02178021,
0x24010000,
0xff098200,
0x8e0d0000,
0xff098200,
0x8e080000,
0xff098200,
0xd602fff8,
0xd600fff0,
0xae0d0000,
0xff098200,
0xae080000,
0xff098200,
0xf6020010,
0xf6000008,
0x26100008,
0x15a10000,
0xff050825,
0x24090010,
0xae120000,
0xff098200,
0x8d120000,
0xff098200,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000bb942,
0x000d6880,
0x32f707f8,
0x026d6021,
0x8d8c0000,
0x01800008,
0x02f0b821,
0xff000000,
0x0217b821,
0x8ee80000,
0xff098200,
0x8ee90000,
0xff098200,
0x8d0c0000,
0xff098200,
0x8d0d0000,
0xff098200,
0x26520004,
0xff06000b,
0x012c082b,
0x10200000,
0xff050805,
0x000978c0,
0x01af7821,
0x8dee0000,
0xff098200,
0xd5e00000,
0x44891000,
0x964a0000,
0xff098200,
0x11de0000,
0xff05080b,
0x25290001,
0x468010a1,
0x3c0f0000,
0xff090200,
0xf6e00008,
0x000a5080,
0x014f5021,
0xaee90000,
0xff098200,
0x024a9021,
0xf6e20000,
0xff06000d,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8d0d0000,
0xff098200,
0x012c4823,
0x8d0e0000,
0xff098200,
0xff060010,
0x01a9082b,
0x14200000,
0xff05080d,
0x00097940,
0x000940c0,
0x01e87823,
0x01ee7821,
0x8de80000,
0xff098200,
0xd5e00000,
0x964a0000,
0xff098200,
0x111e0000,
0xff050810,
0x25290001,
0xd5e20000,
0xff098200,
0x3c0f0000,
0xff090200,
0xf6e00008,
0x012c4821,
0x000a5080,
0x014f5021,
0xf6e20000,
0x024a9021,
0x10000000,
0xff05080d,
0xff000000,
0xaee90000,
0xff098200,
0xff000000,
0x0217b821,
0x8eec0000,
0xff098200,
0x8eed0000,
0xff098200,
0x8eee0000,
0xff098200,
0x8eef0000,
0xff098200,
0x24010000,
0xff098200,
0x15810000,
0xff050805,
0x25ce0000,
0xff098200,
0x91ad0000,
0xff098200,
0x25ef0000,
0xff098200,
0x000a6042,
0x01cf7025,
0x25ad0000,
0xff098200,
0x024c6021,
0x01ae6825,
0x15a00000,
0xff050805,
0x3c0e0000,
0xff090200,
0x018e9021,
0xaee00000,
0xff098200,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x240f0000,
0xff098200,
0x240d0000,
0xff098200,
0xa24f0000,
0xff098200,
0x018e9021,
0x10000000,
0xff05080b,
0xa24d0000,
0xff098200,
0xff000000,
0x8e0c0000,
0xff098200,
0x314907f8,
0x000b4542,
0x02094821,
0x310807f8,
0x0217b821,
0x25290000,
0xff098200,
0x02e87021,
0x260ffff8,
0x012c4823,
0x11000000,
0xff050805,
0x01e96823,
0x25cefff0,
0xff06000b,
0x8d240000,
0xff098200,
0x012f082b,
0x8d250000,
0xff098200,
0x25290008,
0x03c1200a,
0xaee40000,
0xff098200,
0xaee50000,
0xff098200,
0x02ee082b,
0x14200000,
0xff05080b,
0x26f70008,
0xff06000d,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff06000f,
0x8e8c0000,
0xff098200,
0x19a00000,
0xff05080d,
0x24150008,
0x02ed7021,
0x018e082b,
0x14200000,
0xff050807,
0x25b50008,
0xff060010,
0xd5200000,
0x25290008,
0xf6e00000,
0x012f082b,
0x14200000,
0xff050810,
0x26f70008,
0x10000000,
0xff05080d,
0x00000000,
0xff060011,
0x8e790000,
0xff098200,
0xae970000,
0xff098200,
0x02f0b823,
0xae900000,
0xff098200,
0x01308023,
0xafb20014,
0x000d28c2,
0x0320f809,
0x02802021,
0x02004821,
0x8e900000,
0xff098200,
0x0217b821,
0x02094821,
0x10000000,
0xff050810,
0xff000000,
0x260ffff8,
0xff000000,
0x01555021,
0xff000000,
0x8e120000,
0xff098200,
0x0217b821,
0x0140a821,
0xff06000b,
0x324c0000,
0xff090200,
0x15800000,
0xff05089c,
0x3a4d0000,
0xff090200,
0xff060017,
0x8e4bfffc,
0x260efff8,
0x2549fff8,
0x000b6142,
0x000b4542,
0x318c07f8,
0x310807f8,
0x01c87821,
0x11200000,
0xff050803,
0x01cc8023,
0xff06000c,
0xd6e00000,
0x26f70008,
0x2529fff8,
0xf5c00000,
0x15200000,
0xff05080c,
0x25ce0008,
0xff06000d,
0x25effff8,
0xff06000f,
0x01cf082b,
0x14200000,
0xff050806,
0x8e0d0000,
0xff098200,
0x8e4b0000,
0x26520004,
0x8dad0000,
0xff098200,
0x8db10000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff060010,
0xadde0000,
0xff098200,
0x10000000,
0xff05080f,
0x25ce0008,
0xff06009c,
0x31ae0000,
0xff090200,
0x15c00000,
0xff050818,
0x00000000,
0x020d8023,
0x10000000,
0xff05080b,
0x8e120000,
0xff098200,
0xff000000,
0x8e120000,
0xff098200,
0x0217b821,
0x0140a821,
0x324c0000,
0xff090200,
0x15800000,
0xff05089c,
0x3a4d0000,
0xff090200,
0x8e4bfffc,
0x260efff8,
0xff000000,
0xd6e00000,
0xff000000,
0x000b4542,
0x000bb942,
0x310807f8,
0x32f707f8,
0xff000000,
0xf5c00000,
0xff000000,
0x01d78023,
0xff06000f,
0x0148082b,
0x14200000,
0xff050806,
0x8e0d0000,
0xff098200,
0x8e4b0000,
0x26520004,
0x8dad0000,
0xff098200,
0x8db10000,
0xff098200,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff060010,
0x25ce0008,
0x254a0008,
0x10000000,
0xff05080f,
0xff000000,
0xadde0000,
0xff098200,
0xff000000,
0xadde0000,
0xff098200,
0xff000000,
0x00126842,
0x31ad007e,
0x01b36821,
0x95ae0000,
0xff098200,
0x25ce0000,
0xff098200,
0x05c00000,
0xff050890,
0xa5ae0000,
0xff098200,
0xff000000,
0x0217b821,
0xff000000,
0xd6e00000,
0xff098200,
0xd6e40000,
0xff098200,
0xd6e20000,
0xff098200,
0x8eef0000,
0xff098200,
0x46240000,
0xf6e00000,
0xff098200,
0xff000000,
0x8eed0000,
0xff098200,
0x8eef0000,
0xff098200,
0x8eee0000,
0xff098200,
0x2dad0000,
0xff098200,
0x2dec0000,
0xff098200,
0x2dce0000,
0xff098200,
0x01ac6824,
0x01ae6824,
0xd6e00000,
0xff098200,
0x11a00000,
0xff050842,
0xd6e20000,
0xff098200,
0xff000000,
0x000a5042,
0x3c0c0000,
0xff090200,
0xff000000,
0x4622003e,
0x4620113e,
0xf6e00000,
0xff098200,
0xff000000,
0x240d0001,
0x240e0001,
0x014c6021,
0x01e0782a,
0x00006801,
0x024c9021,
0x00047001,
0x964a0000,
0xff098200,
0x01cf680b,
0x15a00000,
0xff070800,
0x000a50c0,
0xff000000,
0x240d0001,
0x240e0001,
0x01e0782a,
0x00006801,
0x00047001,
0x01cf680b,
0x15a00000,
0xff070800,
0x00000000,
0xff000000,
0x014c6821,
0x01e0782a,
0x01a07021,
0xff000000,
0x00016801,
0x00057001,
0xff000000,
0x00006801,
0x00047001,
0xff000000,
0x01cf680b,
0x024d9021,
0xff000000,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x00126842,
0x31ad007e,
0x01b36821,
0x95ae0000,
0xff098200,
0x25ce0000,
0xff098200,
0x05c00000,
0xff050890,
0xa5ae0000,
0xff098200,
0xff000000,
0x0217b821,
0x8eed0000,
0xff098200,
0x11be0000,
0xff050801,
0x8eee0000,
0xff098200,
0xff000000,
0xaeed0000,
0xff098200,
0x10000000,
0xff070800,
0xaeee0000,
0xff098200,
0xff000000,
0x000a6042,
0x3c010000,
0xff090200,
0x01816021,
0x024c9021,
0xaeed0000,
0xff098200,
0xaeee0000,
0xff098200,
0xff000000,
0xff06000b,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x00126842,
0x31ad007e,
0x01b36821,
0x95ae0000,
0xff098200,
0x25ce0000,
0xff098200,
0x05c00000,
0xff050890,
0xa5ae0000,
0xff098200,
0xff000000,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8e6d0000,
0xff098200,
0x000a5042,
0x24010000,
0x01aa6821,
0xae610000,
0xff098200,
0x8dae0000,
0xae700000,
0xff098200,
0xae740000,
0xff098200,
0x8dce0000,
0xff098200,
0x01c00008,
0x267e0000,
0xff098200,
0xff000000,
0x000a6042,
0x3c010000,
0xff090200,
0x01816021,
0x024c9021,
0x8e4b0000,
0x26520004,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x00126842,
0x31ad007e,
0x01b36821,
0x95ae0000,
0xff098200,
0x25ce0000,
0xff098200,
0x05c00000,
0xff050892,
0xa5ae0000,
0xff098200,
0xff000000,
0x8e8e0000,
0xff098200,
0x924d0000,
0xff098200,
0x8e510000,
0xff098200,
0x01d7082b,
0x14200000,
0xff050820,
0x000d68c0,
0xff000000,
0x8e4b0000,
0x26520004,
0xff000000,
0xff06000c,
0x012d082b,
0x14200000,
0xff050803,
0x02090821,
0xff000000,
0x000b5402,
0x10000000,
0xff070800,
0x000a50c0,
0xff000000,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0xff06000d,
0xac3e0000,
0xff098200,
0x10000000,
0xff05080c,
0x25290008,
0xff000000,
0xf0f0f0f0,
0xff000000,
0x02096821,
0x8e8e0000,
0xff098200,
0x02e96021,
0xada80000,
0xff098200,
0x252f0000,
0xff098200,
0x018e082b,
0x8e510000,
0xff098200,
0x10200000,
0xff050820,
0xadaf0000,
0xff098200,
0x924e0000,
0xff098200,
0x0200b821,
0x01a04821,
0x8e4b0000,
0x26520004,
0x11c00000,
0xff050803,
0x25b00008,
0xff06000b,
0x8eec0000,
0xff098200,
0x8eef0000,
0xff098200,
0x02e9082b,
0x01802021,
0x03c1600a,
0x03c1200b,
0xadaf0000,
0xff098200,
0x25ceffff,
0xadac0000,
0xff098200,
0x25ad0008,
0xaee40000,
0xff098200,
0x15c00000,
0xff05080b,
0x26f70008,
0xff06000d,
0x316d00ff,
0x000d6880,
0x026d6021,
0x000b5402,
0x8d810000,
0x000bb942,
0x000a50c0,
0x00200008,
0x32f707f8,
0xff000000,
0x8d190000,
0xff098200,
0xff000000,
0x8e790000,
0xff098200,
0xff000000,
0x02e96821,
0x8e8e0000,
0xff098200,
0x02094821,
0xae900000,
0xff098200,
0x01cd082b,
0xae890000,
0xff098200,
0x240c0000,
0xff098200,
0xff000000,
0x8d050000,
0xff098200,
0xff000000,
0x14200000,
0xff05081f,
0x02802021,
0x0320f809,
0xae6c0000,
0xff098200,
0x8e900000,
0xff098200,
0x000250c0,
0x8e8d0000,
0xff098200,
0x240c0000,
0xff098200,
0x8e120000,
0xff098200,
0x01aab823,
0x10000000,
0xff050816,
0xae6c0000,
0xff098200,
0xff000000,
0xff010000
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_l,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_BC_CAT_Z,
  GLOB_cont_nop,
  GLOB_vmeta_tgets1,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets1,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_ra,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_vmeta_callt,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res,
  GLOB_ff_type,
  GLOB_fff_resn,
  GLOB_ff_getmetatable,
  GLOB_fff_restv,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_fff_res1,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_pow,
  GLOB_ff_math_atan2,
  GLOB_ff_math_fmod,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_fff_resi,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_ff_string_reverse,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_band,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_ff_bit_tobit,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_trunc,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB_BC_CALL_Z,
  GLOB_BC_RETV_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c",
  "vm_unwind_c_eh",
  "vm_unwind_ff",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_l",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "BC_CAT_Z",
  "cont_nop",
  "vmeta_tgets1",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets1",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "vmeta_comp",
  "vmeta_binop",
  "cont_ra",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_unm",
  "vmeta_arith",
  "vmeta_len",
  "BC_LEN_Z",
  "vmeta_callt",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res",
  "ff_type",
  "fff_resn",
  "ff_getmetatable",
  "fff_restv",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "ff_pairs",
  "ff_ipairs_aux",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "fff_res1",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_pow",
  "ff_math_atan2",
  "ff_math_fmod",
  "ff_math_sqrt",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "fff_resi",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "ff_string_reverse",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_band",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "ff_bit_tobit",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_trunc",
  "vm_ffi_callback",
  "vm_ffi_call",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  "BC_CALL_Z",
  "BC_RETV_Z",
  (const char *)0
};
static const char *const extnames[] = {
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define GG_DISP2GOT		(GG_OFS(got) - GG_OFS(dispatch))
#define DISPATCH_GOT(name)	(GG_DISP2GOT + 4*LJ_GOT_##name)
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 1, FRAME_P, LJ_TTRUE, LJ_ENDIAN_SELECT(-4,-8), LJ_ENDIAN_SELECT(-4,-8), FRAME_TYPE, FRAME_C, Dt1(->base), ~LJ_VMST_C, DISPATCH_GL(vmstate), Dt1(->top));
  dasm_put(Dst, 57, Dt1(->cframe), 72+9*4, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4, 24+3*8, 72+3*4, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, Dt1(->maxstack), LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 109, DISPATCH_GOT(lj_state_growstack), Dt1(->top), ~LJ_VMST_C, Dt1(->glref), Dt2(->vmstate), LJ_TNIL, Dt1(->base), Dt1(->glref), LJ_TFALSE, ~LJ_VMST_INTERP, LJ_ENDIAN_SELECT(-4,-8), GG_G2DISP, LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 172, DISPATCH_GL(vmstate), LUA_MINSTACK, Dt1(->base), Dt1(->top), DISPATCH_GOT(lj_state_growstack), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc), 72+9*4, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4);
  dasm_put(Dst, 235, 24+3*8, 72+3*4, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, Dt1(->glref), Dt1(->status), FRAME_CP, CFRAME_RESUME, GG_G2DISP, Dt1(->cframe), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-4,-8), Dt1(->status), ~LJ_VMST_INTERP, DISPATCH_GL(vmstate), FRAME_TYPE);
  dasm_put(Dst, 296, LJ_TNIL, 72+9*4, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4, 24+3*8, 72+3*4, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, FRAME_CP, 72+9*4);
  dasm_put(Dst, 345, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4, 24+3*8, 72+3*4, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, FRAME_C, Dt1(->cframe), Dt1(->cframe), Dt1(->glref), GG_G2DISP, Dt1(->base));
  dasm_put(Dst, 396, Dt1(->top), ~LJ_VMST_INTERP, LJ_TNIL, DISPATCH_GL(vmstate), LJ_ENDIAN_SELECT(-4,-8), LJ_TFUNC, LJ_ENDIAN_SELECT(-8,-4), LJ_ENDIAN_SELECT(-4,-8), Dt7(->pc), 72+9*4, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4, 24+3*8, 72+3*4);
  dasm_put(Dst, 457, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe), Dt1(->glref), FRAME_CP, GG_G2DISP, -16+LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(-8,-4));
#if LJ_HASFFI
  dasm_put(Dst, 506);
#endif
  dasm_put(Dst, 508, -16+LJ_ENDIAN_SELECT(4,0), Dt7(->pc));
#if LJ_HASFFI
  dasm_put(Dst, 514);
#endif
  dasm_put(Dst, 517, -8+LJ_ENDIAN_SELECT(4,0), PC2PROTO(k));
#if LJ_HASFFI
  dasm_put(Dst, 523);
#endif
  dasm_put(Dst, 531, Dt1(->base), DISPATCH_GL(tmptv), LJ_TSTR, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), DISPATCH_GL(tmptv), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), DISPATCH_GL(tmptv2), LJ_ENDIAN_SELECT(4,0), LJ_TSTR, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), DISPATCH_GL(tmptv));
  dasm_put(Dst, 589, DISPATCH_GOT(lj_meta_tget), Dt1(->base), -FRAME_CONT, Dt1(->top), -16+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(-8,-4), DISPATCH_GL(tmptv), LJ_TSTR, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), DISPATCH_GL(tmptv), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), DISPATCH_GL(tmptv2), LJ_ENDIAN_SELECT(4,0), LJ_TSTR, LJ_ENDIAN_SELECT(0,4));
  dasm_put(Dst, 651, LJ_ENDIAN_SELECT(4,0), DISPATCH_GL(tmptv), DISPATCH_GOT(lj_meta_tset), Dt1(->base), -FRAME_CONT, Dt1(->top), -16+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(-8,-4), DISPATCH_GOT(lj_meta_comp), Dt1(->base), LJ_ENDIAN_SELECT(2,0), (-(BCBIAS_J*4 >> 16) & 65535));
  dasm_put(Dst, 721, -4+LJ_ENDIAN_SELECT(1,2), LJ_ENDIAN_SELECT(4,0), LJ_TISTRUECOND, LJ_ENDIAN_SELECT(4,0), LJ_TISTRUECOND, DISPATCH_GOT(lj_meta_equal), Dt1(->base));
#if LJ_HASFFI
  dasm_put(Dst, 776, DISPATCH_GOT(lj_meta_equal_cd), Dt1(->base));
#endif
  dasm_put(Dst, 789, DISPATCH_GOT(lj_meta_arith), Dt1(->base), -16+LJ_ENDIAN_SELECT(4,0), FRAME_CONT);
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 818);
#endif
  dasm_put(Dst, 820, DISPATCH_GOT(lj_meta_len), Dt1(->base));
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 828);
#else
  dasm_put(Dst, 835);
#endif
  dasm_put(Dst, 839, DISPATCH_GOT(lj_meta_call), Dt1(->base), LJ_ENDIAN_SELECT(-8,-4), LJ_ENDIAN_SELECT(-4,-8), Dt7(->pc), DISPATCH_GOT(lj_meta_call), Dt1(->base), LJ_ENDIAN_SELECT(-4,-8), LJ_ENDIAN_SELECT(-8,-4), DISPATCH_GOT(lj_meta_for), Dt1(->base));
#if LJ_HASJIT
  dasm_put(Dst, 896, BC_JFORI);
#endif
  dasm_put(Dst, 900);
#if LJ_HASJIT
  dasm_put(Dst, 904, BC_JFORI, BC_FORI);
#else
  dasm_put(Dst, 911, BC_FORI);
#endif
  dasm_put(Dst, 915, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TISTRUECOND, LJ_ENDIAN_SELECT(-4,-8), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, Dt8(->upvalue), LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 970, LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_TUDATA, Dt6(->metatable), DISPATCH_GL(gcroot[GCROOT_MMNAME+MM_metatable]), LJ_TNIL, Dt6(->hmask), LJ_TTAB, Dt5(->hash), Dt6(->node), LJ_TSTR, offsetof(Node, key)+LJ_ENDIAN_SELECT(4,0), offsetof(Node, key)+LJ_ENDIAN_SELECT(0,4), DtB(->next), offsetof(Node, val)+LJ_ENDIAN_SELECT(4,0), offsetof(Node, val)+LJ_ENDIAN_SELECT(0,4));
  dasm_put(Dst, 1020, LJ_TISNUM, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT]), LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), 8+LJ_ENDIAN_SELECT(0,4), LJ_TTAB, -LJ_TTAB, Dt6(->metatable), Dt6(->marked));
  dasm_put(Dst, 1075, LJ_GC_BLACK, Dt6(->metatable), DISPATCH_GL(gc.grayagain), ~LJ_GC_BLACK & 255, DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->gclist), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), DISPATCH_GOT(lj_tab_get), -LJ_TTAB, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
  dasm_put(Dst, 1129, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), LJ_TISNUM, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), DISPATCH_GOT(lj_str_fromnum), LJ_TSTR, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(-4,-8), DISPATCH_GOT(lj_tab_next));
  dasm_put(Dst, 1184, Dt1(->base), Dt1(->top), LJ_TNIL, (2+1)*8, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_ENDIAN_SELECT(-4,-8));
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 1219, Dt6(->metatable), Dt8(->upvalue[0]));
#else
  dasm_put(Dst, 1226, Dt8(->upvalue[0]));
#endif
  dasm_put(Dst, 1229, 8+LJ_ENDIAN_SELECT(4,0), (3+1)*8, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), 8+LJ_ENDIAN_SELECT(4,0), -LJ_TTAB, LJ_TISNUM, LJ_ENDIAN_SELECT(-4,-8), Dt6(->asize), Dt6(->array), LJ_ENDIAN_SELECT(4,0), (0+1)*8, (2+1)*8, Dt6(->hmask));
  dasm_put(Dst, 1292, DISPATCH_GOT(lj_tab_getinth), (0+1)*8, (0+1)*8, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_ENDIAN_SELECT(-4,-8));
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 1323, Dt6(->metatable), Dt8(->upvalue[0]));
#else
  dasm_put(Dst, 1330, Dt8(->upvalue[0]));
#endif
  dasm_put(Dst, 1333, 8+LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(0,4), (3+1)*8, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 8+FRAME_PCALL, 8+LJ_ENDIAN_SELECT(4,0), DISPATCH_GL(hookmask), LJ_TFUNC, HOOK_ACTIVE_SHIFT, 16+FRAME_PCALL, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4));
  dasm_put(Dst, 1392, LJ_TTHREAD, Dt1(->status), Dt1(->cframe), Dt1(->top), Dt1(->base), -LUA_YIELD, Dt1(->maxstack), LJ_ENDIAN_SELECT(-4,-8), Dt1(->base), Dt1(->top), Dt1(->top));
  dasm_put(Dst, 1451, Dt1(->base), LUA_YIELD+1, Dt1(->top), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(vmstate), Dt1(->maxstack), Dt1(->top), FRAME_TYPE, LJ_TTRUE, -8+LJ_ENDIAN_SELECT(4,0), LJ_TFALSE, Dt1(->top));
  dasm_put(Dst, 1511, (2+1)*8, -8+LJ_ENDIAN_SELECT(4,0), FRAME_TYPE, DISPATCH_GOT(lj_state_growstack), Dt8(->upvalue[0].gcr), Dt1(->status), Dt1(->cframe), Dt1(->top), Dt1(->base), -LUA_YIELD, Dt1(->maxstack), LJ_ENDIAN_SELECT(-4,-8), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 1566, Dt1(->top), Dt1(->base), LUA_YIELD+1, Dt1(->top), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(vmstate), Dt1(->maxstack), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 1627, DISPATCH_GOT(lj_ffh_coroutine_wrap_err), DISPATCH_GOT(lj_state_growstack), Dt1(->cframe), Dt1(->base), CFRAME_RESUME, Dt1(->top), LUA_YIELD, Dt1(->cframe), Dt1(->status), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
  dasm_put(Dst, 1682, LJ_ENDIAN_SELECT(-4,-8), LJ_ENDIAN_SELECT(-4,-8), -8+LJ_ENDIAN_SELECT(4,0), -8+LJ_ENDIAN_SELECT(0,4), (1+1)*8, FRAME_TYPE, -8+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
  dasm_put(Dst, 1750, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(log), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(log10), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 1806, DISPATCH_GOT(exp), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(sin), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(cos), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(tan));
  dasm_put(Dst, 1862, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(asin), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(acos), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(atan), LJ_TISNUM);
  dasm_put(Dst, 1918, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(sinh), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(cosh), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(tanh), LJ_TISNUM);
  dasm_put(Dst, 1977, LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, DISPATCH_GOT(pow), LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, DISPATCH_GOT(atan2), LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 2039, DISPATCH_GOT(fmod), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, Dt8(->upvalue[0]), LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 2094, DISPATCH_GOT(ldexp), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, DISPATCH_GOT(frexp), LJ_ENDIAN_SELECT(-4,-8), DISPATCH_GL(tmptv), DISPATCH_GL(tmptv), (2+1)*8, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, DISPATCH_GOT(modf), LJ_ENDIAN_SELECT(-4,-8), (2+1)*8);
  dasm_put(Dst, 2158, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
  dasm_put(Dst, 2217, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, Dt5(->len), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), -LJ_TSTR, Dt5(->len), Dt5([1]), LJ_ENDIAN_SELECT(-4,-8), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 2276, LJ_TISNUM, DISPATCH_GOT(lj_str_new), Dt1(->base), Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 16+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 2337, LJ_TSTR, Dt5(->len), sizeof(GCstr)-1, DISPATCH_GL(strempty), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), -LJ_TSTR, LJ_TISNUM, Dt5(->len), DISPATCH_GL(tmpbuf.sz));
  dasm_put(Dst, 2407, DISPATCH_GL(tmpbuf.buf), Dt5([1]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, DISPATCH_GL(tmpbuf.sz), Dt5(->len), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 2464, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, DISPATCH_GL(tmpbuf.sz), Dt5(->len), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2527, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, DISPATCH_GL(tmpbuf.sz), Dt5(->len), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, DISPATCH_GOT(lj_tab_len), LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 2586, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 2649, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 2719, 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0));
  dasm_put(Dst, 2790, 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), 8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, Dt8(->f));
  dasm_put(Dst, 2863, LJ_ENDIAN_SELECT(-4,-8), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc), FRAME_TYPE, LJ_ENDIAN_SELECT(1,2), DISPATCH_GOT(lj_state_growstack), LUA_MINSTACK, Dt1(->base));
  dasm_put(Dst, 2931, DISPATCH_GOT(lj_gc_step), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-8,-4));
#if LJ_HASJIT
  dasm_put(Dst, 2957, DISPATCH_GL(hookmask), HOOK_VMEVENT, DISPATCH_GL(hookcount), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
#endif
  dasm_put(Dst, 2980, DISPATCH_GL(hookmask), HOOK_ACTIVE, GG_DISP2STATIC, DISPATCH_GL(hookmask), DISPATCH_GL(hookcount), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE, DISPATCH_GOT(lj_dispatch_ins), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 3028, GG_DISP2STATIC, -24+LJ_ENDIAN_SELECT(0,4));
#if LJ_HASJIT
  dasm_put(Dst, 3047, LJ_ENDIAN_SELECT(-8,-4), GG_DISP2J, Dt7(->pc), DISPATCH_J(L), PC2PROTO(framesize), DISPATCH_GOT(lj_trace_hot), Dt1(->base), Dt1(->top));
#endif
  dasm_put(Dst, 3072);
#if LJ_HASJIT
  dasm_put(Dst, 3074);
#endif
  dasm_put(Dst, 3077);
#if LJ_HASJIT
  dasm_put(Dst, 3080);
#endif
  dasm_put(Dst, 3083, DISPATCH_GOT(lj_dispatch_call), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-8,-4));
#if LJ_HASJIT
  dasm_put(Dst, 3107, -(16+32*8+32*4), 16+0*8, 16+32*8+0*4, 16+32*8+1*4, 16+2*8, 16+32*8+2*4, 16+32*8+3*4, 16+4*8, 16+32*8+4*4, 16+32*8+5*4, 16+6*8, 16+32*8+6*4, 16+32*8+7*4, 16+8*8, 16+32*8+8*4, 16+32*8+9*4, 16+10*8, 16+32*8+10*4, 16+32*8+11*4, 16+12*8, 16+32*8+12*4, 16+32*8+13*4, 16+14*8);
  dasm_put(Dst, 3154, 16+32*8+14*4, 16+32*8+15*4, 16+16*8, 16+32*8+16*4, 16+32*8+17*4, 16+18*8, 16+32*8+18*4, 16+32*8+19*4, 16+20*8, 16+32*8+20*4, 16+32*8+21*4, 16+22*8, 16+32*8+22*4, 16+32*8+23*4, 16+24*8, 16+32*8+24*4, 16+32*8+25*4, 16+26*8, 16+32*8+26*4, 16+32*8+27*4, 16+28*8, 16+32*8+28*4, 16+30*8);
  dasm_put(Dst, 3201, 16+32*8+30*4, 16+32*8+31*4, ~LJ_VMST_EXIT, 16+32*8+32*4, -GG_DISP2G-32768, DISPATCH_GL(vmstate), 16+32*8+29*4, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_GOT(lj_trace_exit), DISPATCH_J(L), DISPATCH_J(parent), DISPATCH_J(exitno), GG_DISP2J, Dt1(->base), Dt1(->cframe), Dt1(->base));
#endif
  dasm_put(Dst, 3245);
#if LJ_HASJIT
  dasm_put(Dst, 3247, -GG_DISP2G-32768, LJ_ENDIAN_SELECT(-8,-4), LJ_TNIL, Dt7(->pc), DISPATCH_GL(jit_L), PC2PROTO(k), DISPATCH_GL(vmstate), BC_FUNCF*4, DISPATCH_GOT(lj_err_throw));
#endif
  dasm_put(Dst, 3296);
#if LJ_HASJIT
  dasm_put(Dst, 3344);
#endif
  dasm_put(Dst, 3367);
#if LJ_HASFFI
#define DtE(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
  dasm_put(Dst, 3369, 72+9*4, 72+8*4, 24+5*8, 72+7*4, 72+6*4, 24+4*8, 72+5*4, 72+4*4, 24+3*8, 72+3*4, 72+2*4, 24+2*8, 72+1*4, 72+0*4, 24+1*8, 24+0*8, Dt2(->ctype_state), GG_G2DISP, DISPATCH_GOT(lj_ccallback_enter), DtE(->cb.slot), DtE(->cb.gpr[0]), DtE(->cb.gpr[1]), DtE(->cb.fpr[0]));
  dasm_put(Dst, 3417, DtE(->cb.gpr[2]), DtE(->cb.gpr[3]), DtE(->cb.fpr[1]), 112+16, DtE(->cb.stack), Dt1(->base), Dt1(->top), LJ_ENDIAN_SELECT(-8,-4), ~LJ_VMST_INTERP, LJ_TNIL, DISPATCH_GL(vmstate), Dt7(->pc));
#endif
  dasm_put(Dst, 3461);
#if LJ_HASFFI
  dasm_put(Dst, 3463, DISPATCH_GOT(lj_ccallback_leave), DISPATCH_GL(ctype_state), Dt1(->base), Dt1(->top), DtE(->L), DtE(->cb.gpr[0]), DtE(->cb.fpr[0]), DtE(->cb.gpr[1]), DtE(->cb.fpr[1]));
#endif
  dasm_put(Dst, 3487);
#if LJ_HASFFI
#define DtF(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
  dasm_put(Dst, 3489, DtF(->spadj), DtF(->nsp), offsetof(CCallState, stack), DtF(->func), DtF(->gpr[1]), DtF(->gpr[2]), DtF(->gpr[3]), DtF(->fpr[0]), DtF(->fpr[1]), DtF(->gpr[0]), DtF(->gpr[0]), DtF(->gpr[1]), DtF(->fpr[0]), DtF(->fpr[1]));
#endif
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
  int vk = 0;
  dasm_put(Dst, 3545, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */

  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 3547, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_ENDIAN_SELECT(2,0), (-(BCBIAS_J*4 >> 16) & 65535));
    if (op == BC_ISLT || op == BC_ISGE) {
      dasm_put(Dst, 3570);
    } else {
      dasm_put(Dst, 3572);
    }
    if (op == BC_ISLT || op == BC_ISLE) {
      dasm_put(Dst, 3574);
    } else {
      dasm_put(Dst, 3576);
    }
    dasm_put(Dst, 3578);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 3592, LJ_ENDIAN_SELECT(4,0), -4+LJ_ENDIAN_SELECT(2,0), LJ_ENDIAN_SELECT(4,0), (-(BCBIAS_J*4 >> 16) & 65535), LJ_TISNUM, LJ_TISNUM);
    if (vk) {
      dasm_put(Dst, 3616);
    } else {
      dasm_put(Dst, 3618);
    }
    dasm_put(Dst, 3620, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(0,4));
    if (LJ_HASFFI) {
      dasm_put(Dst, 3639, LJ_TCDATA);
    }
    dasm_put(Dst, 3644, LJ_TISPRI);
    if (LJ_HASFFI) {
      dasm_put(Dst, 3647);
    }
    dasm_put(Dst, 3650, LJ_TISTABUD+1);
    if (vk) {
      dasm_put(Dst, 3661);
    } else {
      dasm_put(Dst, 3663);
    }
    dasm_put(Dst, 3665, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq, 1-vk);
    break;

  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 3682, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), -4+LJ_ENDIAN_SELECT(2,0));
    if (LJ_HASFFI) {
      dasm_put(Dst, 3693, LJ_TCDATA);
    }
    dasm_put(Dst, 3698, -LJ_TSTR, (-(BCBIAS_J*4 >> 16) & 65535));
    if (vk) {
      dasm_put(Dst, 3708);
    } else {
      dasm_put(Dst, 3710);
    }
    dasm_put(Dst, 3712);
    break;

  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 3725, LJ_ENDIAN_SELECT(4,0), -4+LJ_ENDIAN_SELECT(2,0), (-(BCBIAS_J*4 >> 16) & 65535), LJ_TISNUM);
    if (LJ_HASFFI) {
      dasm_put(Dst, 3740);
    } else {
      dasm_put(Dst, 3743);
    }
    dasm_put(Dst, 3746);
    if (vk) {
      dasm_put(Dst, 3749);
    } else {
      dasm_put(Dst, 3753);
    }
    dasm_put(Dst, 3757);
    if (LJ_HASFFI) {
      dasm_put(Dst, 3769, LJ_TCDATA);
    }
    break;

  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 3779, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(2,0));
    if (LJ_HASFFI) {
      dasm_put(Dst, 3788, LJ_TCDATA);
    }
    dasm_put(Dst, 3793, (-(BCBIAS_J*4 >> 16) & 65535));
    if (vk) {
      dasm_put(Dst, 3799);
    } else {
      dasm_put(Dst, 3801);
    }
    dasm_put(Dst, 3803);
    break;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 3816, LJ_ENDIAN_SELECT(2,0), LJ_ENDIAN_SELECT(4,0));
    if (op == BC_IST || op == BC_ISF) {
      dasm_put(Dst, 3823, LJ_TISTRUECOND, (-(BCBIAS_J*4 >> 16) & 65535));
      if (op == BC_IST) {
	dasm_put(Dst, 3830);
      } else {
	dasm_put(Dst, 3832);
      }
      dasm_put(Dst, 3834);
    } else {
      dasm_put(Dst, 3836, LJ_TISTRUECOND);
      if (op == BC_ISTC) {
	dasm_put(Dst, 3840);
      } else {
	dasm_put(Dst, 3843);
      }
      dasm_put(Dst, 3846, (-(BCBIAS_J*4 >> 16) & 65535));
    }
    dasm_put(Dst, 3855);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 3867);
    break;
  case BC_NOT:
    dasm_put(Dst, 3883, LJ_ENDIAN_SELECT(4,0), LJ_TFALSE, LJ_TISTRUECOND, LJ_TTRUE, LJ_ENDIAN_SELECT(4,0));
    break;
  case BC_UNM:
    dasm_put(Dst, 3907, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
    break;
  case BC_LEN:
    dasm_put(Dst, 3930, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TSTR, LJ_TTAB, Dt5(->len));
#ifdef LUAJIT_ENABLE_LUA52COMPAT
    dasm_put(Dst, 3964, Dt6(->metatable));
#endif
    dasm_put(Dst, 3971, DISPATCH_GOT(lj_tab_len));
#ifdef LUAJIT_ENABLE_LUA52COMPAT
    dasm_put(Dst, 3980, Dt6(->nomm), 1<<MM_len);
#endif
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 3992);
    switch (vk) {
    case 0:
    dasm_put(Dst, 3996, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4005, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4014, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4028);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 4045);
    switch (vk) {
    case 0:
    dasm_put(Dst, 4049, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4058, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4067, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4081);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 4098);
    switch (vk) {
    case 0:
    dasm_put(Dst, 4102, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4111, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4120, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4134);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 4151);
    switch (vk) {
    case 0:
    dasm_put(Dst, 4155, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4164, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4173, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4187);
    break;
  case BC_MODVN:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 4204);
    switch (vk) {
    case 0:
    dasm_put(Dst, 4208, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4217, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4226, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4240);
    break;
  case BC_MODNV: case BC_MODVV:
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    dasm_put(Dst, 4262);
    switch (vk) {
    case 0:
    dasm_put(Dst, 4266, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 4275, LJ_ENDIAN_SELECT(4,0), LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 4284, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 4298);
    break;
  case BC_POW:
    dasm_put(Dst, 4305, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, DISPATCH_GOT(pow));
    break;

  case BC_CAT:
    dasm_put(Dst, 4341, Dt1(->base), DISPATCH_GOT(lj_meta_cat), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 4376, LJ_TSTR, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0));
    break;
  case BC_KCDATA:
#if LJ_HASFFI
    dasm_put(Dst, 4398, LJ_TCDATA, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0));
#endif
    break;
  case BC_KSHORT:
    dasm_put(Dst, 4420);
    break;
  case BC_KNUM:
    dasm_put(Dst, 4437);
    break;
  case BC_KPRI:
    dasm_put(Dst, 4453, LJ_ENDIAN_SELECT(4,0));
    break;
  case BC_KNIL:
    dasm_put(Dst, 4470, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0));
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 4494, LJ_ENDIAN_SELECT(-8,-4), Dt7(->uvptr), DtA(->v));
    break;
  case BC_USETV:
    dasm_put(Dst, 4517, LJ_ENDIAN_SELECT(-8,-4), Dt7(->uvptr), DtA(->marked), DtA(->v), LJ_GC_BLACK, DtA(->closed), LJ_ENDIAN_SELECT(4,0), LJ_GC_BLACK|1, -(LJ_TISNUM+1), LJ_TISGCV - (LJ_TISNUM+1), LJ_ENDIAN_SELECT(0,4), Dt4(->gch.marked), LJ_GC_WHITES, DISPATCH_GOT(lj_gc_barrieruv), GG_DISP2G);
    break;
  case BC_USETS:
    dasm_put(Dst, 4577, LJ_ENDIAN_SELECT(-8,-4), Dt7(->uvptr), DtA(->marked), DtA(->v), Dt5(->marked), LJ_GC_BLACK, DtA(->closed), LJ_TSTR, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), LJ_GC_WHITES, DISPATCH_GOT(lj_gc_barrieruv), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 4632, LJ_ENDIAN_SELECT(-8,-4), Dt7(->uvptr), DtA(->v));
    break;
  case BC_USETP:
    dasm_put(Dst, 4655, LJ_ENDIAN_SELECT(-8,-4), Dt7(->uvptr), DtA(->v), LJ_ENDIAN_SELECT(4,0));
    break;

  case BC_UCLO:
    dasm_put(Dst, 4679, Dt1(->openupval), (-(BCBIAS_J*4 >> 16) & 65535), DISPATCH_GOT(lj_func_closeuv), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 4710, DISPATCH_GOT(lj_func_newL_gc), LJ_ENDIAN_SELECT(-8,-4), Dt1(->base), Dt1(->base), LJ_TFUNC, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4));
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
  case BC_TDUP:
    dasm_put(Dst, 4743, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base));
    if (op == BC_TNEW) {
      dasm_put(Dst, 4755, DISPATCH_GOT(lj_tab_new));
    } else {
      dasm_put(Dst, 4766, DISPATCH_GOT(lj_tab_dup));
    }
    dasm_put(Dst, 4774, Dt1(->base), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), DISPATCH_GOT(lj_gc_step_fixtop));
    break;

  case BC_GGET:
  case BC_GSET:
    dasm_put(Dst, 4804, LJ_ENDIAN_SELECT(-8,-4), Dt7(->env));
    if (op == BC_GGET) {
      dasm_put(Dst, 4812);
    } else {
      dasm_put(Dst, 4815);
    }
    dasm_put(Dst, 4818);
    break;

  case BC_TGETV:
    dasm_put(Dst, 4820, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_TISNUM, LJ_TSTR, Dt6(->asize), Dt6(->array), LJ_ENDIAN_SELECT(4,0), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 4895, LJ_ENDIAN_SELECT(0,4));
    break;
  case BC_TGETS:
    dasm_put(Dst, 4901, LJ_ENDIAN_SELECT(4,0), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), Dt6(->hmask), Dt5(->hash), Dt6(->node), offsetof(Node, key)+LJ_ENDIAN_SELECT(4,0), offsetof(Node, key)+LJ_ENDIAN_SELECT(0,4), DtB(->next), offsetof(Node, val)+LJ_ENDIAN_SELECT(4,0), -LJ_TSTR, Dt6(->metatable), offsetof(Node, val)+LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4));
    dasm_put(Dst, 4970, LJ_TNIL, Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 4987, LJ_ENDIAN_SELECT(4,0), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), Dt6(->asize), Dt6(->array), LJ_ENDIAN_SELECT(4,0), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;

  case BC_TSETV:
    dasm_put(Dst, 5044, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_TTAB, LJ_TISNUM, LJ_TSTR, Dt6(->asize), Dt6(->array), Dt6(->marked), LJ_ENDIAN_SELECT(4,0), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
    dasm_put(Dst, 5117, LJ_ENDIAN_SELECT(0,4), DISPATCH_GL(gc.grayagain), ~LJ_GC_BLACK & 255, DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 5145, LJ_ENDIAN_SELECT(4,0), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), Dt6(->hmask), Dt5(->hash), Dt6(->node), Dt6(->nomm), offsetof(Node, key)+LJ_ENDIAN_SELECT(4,0), offsetof(Node, key)+LJ_ENDIAN_SELECT(0,4), LJ_TSTR, DtB(->next), offsetof(Node, val)+LJ_ENDIAN_SELECT(4,0), Dt6(->marked), Dt6(->metatable), LJ_GC_BLACK);
    dasm_put(Dst, 5203, DtB(->val), Dt6(->nomm), 1<<MM_newindex, Dt6(->metatable), DISPATCH_GL(tmptv), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, DISPATCH_GOT(lj_tab_newkey), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 5265, DISPATCH_GL(gc.grayagain), ~LJ_GC_BLACK & 255, DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 5282, LJ_ENDIAN_SELECT(4,0), LJ_TTAB, LJ_ENDIAN_SELECT(0,4), Dt6(->asize), Dt6(->array), LJ_ENDIAN_SELECT(4,0), Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DISPATCH_GL(gc.grayagain));
    dasm_put(Dst, 5349, ~LJ_GC_BLACK & 255, DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 5360, -8+LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(0,4), Dt6(->asize), Dt6(->marked), Dt6(->array), LJ_GC_BLACK, DISPATCH_GOT(lj_tab_reasize), Dt1(->base), Dt1(->base), DISPATCH_GL(gc.grayagain), ~LJ_GC_BLACK & 255, DISPATCH_GL(gc.grayagain), Dt6(->marked));
    dasm_put(Dst, 5433, Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALLM:
    dasm_put(Dst, 5438);
    break;
  case BC_CALL:
    dasm_put(Dst, 5443, LJ_TFUNC, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(-4,-8), Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 5472);
    break;
  case BC_CALLT:
    dasm_put(Dst, 5474, LJ_TFUNC, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(-4,-8), FRAME_TYPE, Dt7(->ffid), FRAME_VARG, LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc), -8+LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc));
    dasm_put(Dst, 5543, PC2PROTO(k), FRAME_TYPEP, LJ_ENDIAN_SELECT(-4,-8), FRAME_TYPE);
    break;

  case BC_ITERC:
    dasm_put(Dst, 5559, LJ_TFUNC, -24+LJ_ENDIAN_SELECT(4,0), -24+LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(-4,-8), Dt7(->pc));
    break;

  case BC_ITERN:
#if LJ_HASJIT
#endif
    dasm_put(Dst, 5594, -16+LJ_ENDIAN_SELECT(0,4), -8+LJ_ENDIAN_SELECT(0,4), Dt6(->asize), Dt6(->array), LJ_ENDIAN_SELECT(4,0), -4+LJ_ENDIAN_SELECT(2,0), (-(BCBIAS_J*4 >> 16) & 65535), -8+LJ_ENDIAN_SELECT(0,4), Dt6(->hmask), Dt6(->node), LJ_ENDIAN_SELECT(4,0), -4+LJ_ENDIAN_SELECT(2,0), DtB(->key), (-(BCBIAS_J*4 >> 16) & 65535));
    dasm_put(Dst, 5676, -8+LJ_ENDIAN_SELECT(0,4));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 5679, -24+LJ_ENDIAN_SELECT(4,0), -24+LJ_ENDIAN_SELECT(0,4), -16+LJ_ENDIAN_SELECT(4,0), -8+LJ_ENDIAN_SELECT(4,0), LJ_TFUNC, -LJ_TTAB, Dt8(->ffid), -LJ_TNIL, -FF_next_N, (-(BCBIAS_J*4 >> 16) & 65535), -8+LJ_ENDIAN_SELECT(0,4), BC_JMP, BC_ITERC, -4+LJ_ENDIAN_SELECT(0,3), LJ_ENDIAN_SELECT(0,3));
    break;

  case BC_VARG:
    dasm_put(Dst, 5736, LJ_ENDIAN_SELECT(-4,-8), FRAME_VARG, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), Dt1(->maxstack), DISPATCH_GOT(lj_state_growstack), Dt1(->top), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 5823);
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 5825);
    break;

  case BC_RET:
    dasm_put(Dst, 5827, LJ_ENDIAN_SELECT(-4,-8), FRAME_TYPE, FRAME_VARG, LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc), PC2PROTO(k), LJ_ENDIAN_SELECT(4,0), FRAME_TYPEP, LJ_ENDIAN_SELECT(-4,-8));
    break;

  case BC_RET0: case BC_RET1:
    dasm_put(Dst, 5899, LJ_ENDIAN_SELECT(-4,-8), FRAME_TYPE, FRAME_VARG);
    if (op == BC_RET1) {
      dasm_put(Dst, 5912);
    }
    dasm_put(Dst, 5914);
    if (op == BC_RET1) {
      dasm_put(Dst, 5919);
    }
    dasm_put(Dst, 5921, LJ_ENDIAN_SELECT(-8,-4), Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET1) {
      dasm_put(Dst, 5949, LJ_ENDIAN_SELECT(4,0));
    } else {
      dasm_put(Dst, 5952, -8+LJ_ENDIAN_SELECT(4,0));
    }
    break;

  /* -- Loops and branches ------------------------------------------------ */

  case BC_FORL:
#if LJ_HASJIT
    dasm_put(Dst, 5955, GG_DISP2HOT, -HOTCOUNT_LOOP, GG_DISP2HOT);
#endif
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 5967);
    if (vk) {
      dasm_put(Dst, 5969, FORL_IDX*8, FORL_STEP*8, FORL_STOP*8, FORL_STEP*8+LJ_ENDIAN_SELECT(4,0), FORL_IDX*8);
    } else {
      dasm_put(Dst, 5981, FORL_IDX*8+LJ_ENDIAN_SELECT(4,0), FORL_STEP*8+LJ_ENDIAN_SELECT(4,0), FORL_STOP*8+LJ_ENDIAN_SELECT(4,0), LJ_TISNUM, LJ_TISNUM, LJ_TISNUM, FORL_IDX*8, FORL_STOP*8);
    }
    if (op != BC_JFORL) {
      dasm_put(Dst, 6002, (-(BCBIAS_J*4 >> 16) & 65535));
    }
    dasm_put(Dst, 6006, FORL_EXT*8);
    if (op == BC_JFORI) {
      dasm_put(Dst, 6011, -4+LJ_ENDIAN_SELECT(2,0), BC_JLOOP);
    } else if (op == BC_JFORL) {
      dasm_put(Dst, 6025, BC_JLOOP);
    } else {
      dasm_put(Dst, 6035);
      if (op == BC_FORI) {
	dasm_put(Dst, 6039);
      } else {
	dasm_put(Dst, 6042);
      }
      dasm_put(Dst, 6045);
    }
    dasm_put(Dst, 6048);
    break;

  case BC_ITERL:
#if LJ_HASJIT
    dasm_put(Dst, 6060, GG_DISP2HOT, -HOTCOUNT_LOOP, GG_DISP2HOT);
#endif
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 6072, LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4));
    if (op == BC_JITERL) {
      dasm_put(Dst, 6080, -8+LJ_ENDIAN_SELECT(4,0), BC_JLOOP, -8+LJ_ENDIAN_SELECT(0,4));
    } else {
      dasm_put(Dst, 6087, (-(BCBIAS_J*4 >> 16) & 65535), -8+LJ_ENDIAN_SELECT(4,0), -8+LJ_ENDIAN_SELECT(0,4));
    }
    dasm_put(Dst, 6097);
    break;

  case BC_LOOP:
#if LJ_HASJIT
    dasm_put(Dst, 6110, GG_DISP2HOT, -HOTCOUNT_LOOP, GG_DISP2HOT);
#endif
    break;

  case BC_ILOOP:
    dasm_put(Dst, 6122);
    break;

  case BC_JLOOP:
#if LJ_HASJIT
    dasm_put(Dst, 6134, DISPATCH_J(trace), DISPATCH_GL(vmstate), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L), DtD(->mcode), GG_DISP2G+32768);
#endif
    break;

  case BC_JMP:
    dasm_put(Dst, 6152, (-(BCBIAS_J*4 >> 16) & 65535));
    break;

  /* -- Function headers -------------------------------------------------- */

  case BC_FUNCF:
#if LJ_HASJIT
    dasm_put(Dst, 6169, GG_DISP2HOT, -HOTCOUNT_CALL, GG_DISP2HOT);
#endif
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 6181, Dt1(->maxstack), -4+PC2PROTO(numparams), -4+PC2PROTO(k));
    if (op != BC_JFUNCF) {
      dasm_put(Dst, 6192);
    }
    dasm_put(Dst, 6195);
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 6201, BC_JLOOP);
    } else {
      dasm_put(Dst, 6206);
    }
    dasm_put(Dst, 6216, LJ_ENDIAN_SELECT(4,0));
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 6223);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 6225, Dt1(->maxstack), LJ_ENDIAN_SELECT(0,4), 8+FRAME_VARG, -4+PC2PROTO(k), LJ_ENDIAN_SELECT(4,0), -4+PC2PROTO(numparams), LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(0,4), 8+LJ_ENDIAN_SELECT(0,4), 8+LJ_ENDIAN_SELECT(4,0), LJ_ENDIAN_SELECT(4,0));
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    if (op == BC_FUNCC) {
      dasm_put(Dst, 6280, Dt8(->f));
    } else {
      dasm_put(Dst, 6283, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 6286, Dt1(->maxstack), Dt1(->base), Dt1(->top), ~LJ_VMST_C);
    if (op == BC_FUNCCW) {
      dasm_put(Dst, 6298, Dt8(->f));
    }
    dasm_put(Dst, 6301, DISPATCH_GL(vmstate), Dt1(->base), Dt1(->top), ~LJ_VMST_INTERP, LJ_ENDIAN_SELECT(-4,-8), DISPATCH_GL(vmstate));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;

  dasm_growpc(Dst, BC__MAX);

  build_subroutines(ctx);

  dasm_put(Dst, 6322);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op);

  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
  int i;
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.4byte .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.4byte 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 31\n"
	"\t.byte 0xc\n\t.uleb128 29\n\t.uleb128 0\n"
	"\t.align 2\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.4byte .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.4byte .Lframe0\n"
	"\t.4byte .Lbegin\n"
	"\t.4byte %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"
	"\t.byte 0x9f\n\t.sleb128 1\n"
	"\t.byte 0x9e\n\t.sleb128 2\n",
	fcofs, CFRAME_SIZE);
    for (i = 23; i >= 16; i--)
      fprintf(ctx->fp, "\t.byte %d\n\t.uleb128 %d\n", 0x80+i, 26-i);
    for (i = 30; i >= 20; i -= 2)
      fprintf(ctx->fp, "\t.byte %d\n\t.uleb128 %d\n", 0x80+32+i, 42-i);
    fprintf(ctx->fp,
	"\t.align 2\n"
	".LEFDE0:\n\n");
#if LJ_HASFFI
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.4byte .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.4byte .Lframe0\n"
	"\t.4byte lj_vm_ffi_call\n"
	"\t.4byte %d\n"
	"\t.byte 0x9f\n\t.uleb128 1\n"
	"\t.byte 0x90\n\t.uleb128 2\n"
	"\t.byte 0xd\n\t.uleb128 0x10\n"
	"\t.align 2\n"
	".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
    fprintf(ctx->fp, "\t.section .eh_frame,\"aw\",@progbits\n");
    fprintf(ctx->fp,
	"\t.globl lj_err_unwind_dwarf\n"
	".Lframe1:\n"
	"\t.4byte .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.4byte 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 31\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0\n"
	"\t.4byte lj_err_unwind_dwarf\n"
	"\t.byte 0\n"
	"\t.byte 0xc\n\t.uleb128 29\n\t.uleb128 0\n"
	"\t.align 2\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE2:\n"
	"\t.4byte .LEFDE2-.LASFDE2\n"
	".LASFDE2:\n"
	"\t.4byte .LASFDE2-.Lframe1\n"
	"\t.4byte .Lbegin\n"
	"\t.4byte %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"
	"\t.byte 0x9f\n\t.sleb128 1\n"
	"\t.byte 0x9e\n\t.sleb128 2\n",
	fcofs, CFRAME_SIZE);
    for (i = 23; i >= 16; i--)
      fprintf(ctx->fp, "\t.byte %d\n\t.uleb128 %d\n", 0x80+i, 26-i);
    for (i = 30; i >= 20; i -= 2)
      fprintf(ctx->fp, "\t.byte %d\n\t.uleb128 %d\n", 0x80+32+i, 42-i);
    fprintf(ctx->fp,
	"\t.align 2\n"
	".LEFDE2:\n\n");
#if LJ_HASFFI
    fprintf(ctx->fp,
	".Lframe2:\n"
	"\t.4byte .LECIE2-.LSCIE2\n"
	".LSCIE2:\n"
	"\t.4byte 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 31\n"
	"\t.uleb128 1\n"			/* augmentation length */
	"\t.byte 0\n"
	"\t.byte 0xc\n\t.uleb128 29\n\t.uleb128 0\n"
	"\t.align 2\n"
	".LECIE2:\n\n");
    fprintf(ctx->fp,
	".LSFDE3:\n"
	"\t.4byte .LEFDE3-.LASFDE3\n"
	".LASFDE3:\n"
	"\t.4byte .LASFDE3-.Lframe2\n"
	"\t.4byte lj_vm_ffi_call\n"
	"\t.4byte %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0x9f\n\t.uleb128 1\n"
	"\t.byte 0x90\n\t.uleb128 2\n"
	"\t.byte 0xd\n\t.uleb128 0x10\n"
	"\t.align 2\n"
	".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
    break;
  default:
    break;
  }
}

